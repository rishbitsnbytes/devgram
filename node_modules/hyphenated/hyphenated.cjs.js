'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var enUs = _interopDefault(require('hyphenated-en-us'));

class PatternTrie {
  constructor() {
    this.tree = {};
  }

  insert(chars, points) {
    let subTree = this.tree;

    for (const char of chars) {
      if (!subTree[char]) {
        subTree[char] = {};
      }

      subTree = subTree[char];
    }

    subTree[null] = points;
  }

  *getPoints(chars) {
    let subTree = this.tree;

    for (let char of chars) {
      subTree = subTree[char];

      if (subTree) {
        if (subTree[null]) {
          yield subTree[null];
        }
      } else {
        break;
      }
    }
  }

}

const defaults = {
  joiner: '\u00AD',
  borderMarker: '.',
  minWordLength: 4
};

const decodePattern = pattern => {
  return {
    chars: pattern.replace(/[0-9]/g, ''),
    points: pattern.split(/[\0- '\x2D\.A-Za-z\x7F-\xA0\xAA\xAD\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376-\u037D\u037F-\u0383\u0386\u0388-\u03F5\u03F7-\u0481\u0483-\u0559\u0560-\u0588\u058B\u058C\u0590-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7-\u05F2\u05F5-\u0605\u0610-\u061A\u061C\u061D\u0620-\u065F\u066E-\u06D3\u06D5-\u06DD\u06DF-\u06E8\u06EA-\u06EF\u06FA-\u06FC\u06FF\u070E-\u07BF\u07CA-\u07F5\u07FA-\u07FD\u0800-\u082F\u083F-\u085D\u085F-\u0963\u0971-\u09E5\u09F0\u09F1\u09FC\u09FE-\u0A65\u0A70-\u0A75\u0A77-\u0AE5\u0AF2-\u0B65\u0B71\u0B78-\u0BE5\u0BFB-\u0C65\u0C70-\u0C76\u0C80-\u0C83\u0C85-\u0CE5\u0CF0-\u0D4E\u0D50-\u0D57\u0D5F-\u0D65\u0D7A-\u0DE5\u0DF0-\u0DF3\u0DF5-\u0E3E\u0E40-\u0E4E\u0E5C-\u0ECF\u0EDA-\u0F00\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E-\u0F84\u0F86-\u0FBD\u0FC6\u0FCD\u0FDB-\u103F\u1050-\u108F\u109A-\u109D\u10A0-\u10FA\u10FC-\u135F\u137D-\u138F\u139A-\u13FF\u1401-\u166C\u166F-\u169A\u169D-\u16EA\u16F1-\u1734\u1737-\u17D3\u17D7\u17DC-\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180B-\u180F\u181A-\u193F\u1941-\u1943\u1950-\u19CF\u19DB-\u19DD\u1A00-\u1A1D\u1A20-\u1A7F\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AA7\u1AAE-\u1B4F\u1B6B-\u1B73\u1B7D-\u1BAF\u1BBA-\u1BFB\u1C00-\u1C3A\u1C4A-\u1C4F\u1C5A-\u1C7D\u1C80-\u1CBF\u1CC8-\u1CD2\u1CD4-\u1FBC\u1FBE\u1FBF\u1FC2-\u1FCC\u1FD0-\u1FDC\u1FE0-\u1FEC\u1FF0-\u1FFC\u1FFF-\u200F\u2028-\u202F\u205F-\u206F\u2071-\u2073\u207F\u208F-\u209F\u20C0-\u20FF\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2C00-\u2CE4\u2CEB-\u2CF8\u2D00-\u2D6F\u2D71-\u2DFF\u2E2F\u2E50-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u3000\u3005\u3006\u302A-\u302F\u3031-\u3035\u303B\u303C\u3040-\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u318F\u31A0-\u31BF\u31E4-\u31FF\u321F\u32FF\u3400-\u4DBF\u4E00-\uA48F\uA4C7-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A-\uA672\uA674-\uA67D\uA67F-\uA6E5\uA6F0\uA6F1\uA6F8-\uA6FF\uA717-\uA71F\uA722-\uA788\uA78B-\uA827\uA82C-\uA82F\uA83A-\uA873\uA878-\uA8CD\uA8DA-\uA8F7\uA8FB\uA8FD-\uA8FF\uA90A-\uA92D\uA930-\uA95E\uA960-\uA9C0\uA9CE\uA9CF\uA9DA-\uA9DD\uA9E0-\uA9EF\uA9FA-\uAA4F\uAA5A\uAA5B\uAA60-\uAA76\uAA7A-\uAADD\uAAE0-\uAAEF\uAAF2-\uAB5A\uAB5C-\uABEA\uABEC-\uABEF\uABFA-\uFB28\uFB2A-\uFBB1\uFBC2-\uFD3D\uFD40-\uFDFB\uFDFE-\uFE0F\uFE1A-\uFE2F\uFE53\uFE67\uFE6C-\uFF00\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE-\u{100FF}\u{10103}-\u{10106}\u{10134}-\u{10136}\u{1018F}\u{1019C}-\u{1019F}\u{101A1}-\u{101CF}\u{101FD}-\u{102E0}\u{102FC}-\u{1031F}\u{10324}-\u{10340}\u{10342}-\u{10349}\u{1034B}-\u{1039E}\u{103A0}-\u{103CF}\u{103D6}-\u{1049F}\u{104AA}-\u{1056E}\u{10570}-\u{10856}\u{10860}-\u{10876}\u{10880}-\u{108A6}\u{108B0}-\u{108FA}\u{10900}-\u{10915}\u{1091C}-\u{1091E}\u{10920}-\u{1093E}\u{10940}-\u{109BB}\u{109BE}\u{109BF}\u{109D0}\u{109D1}\u{10A00}-\u{10A3F}\u{10A49}-\u{10A4F}\u{10A59}-\u{10A7C}\u{10A80}-\u{10A9C}\u{10AA0}-\u{10AC7}\u{10AC9}-\u{10AEA}\u{10AF7}-\u{10B38}\u{10B40}-\u{10B57}\u{10B60}-\u{10B77}\u{10B80}-\u{10B98}\u{10B9D}-\u{10BA8}\u{10BB0}-\u{10CF9}\u{10D00}-\u{10D2F}\u{10D3A}-\u{10E5F}\u{10E7F}-\u{10F1C}\u{10F27}-\u{10F50}\u{10F5A}-\u{11046}\u{1104E}-\u{11051}\u{11070}-\u{110BA}\u{110BD}\u{110C2}-\u{110EF}\u{110FA}-\u{11135}\u{11144}-\u{11173}\u{11176}-\u{111C4}\u{111C9}-\u{111CC}\u{111CE}\u{111CF}\u{111DA}\u{111DC}\u{111E0}\u{111F5}-\u{11237}\u{1123E}-\u{112A8}\u{112AA}-\u{112EF}\u{112FA}-\u{1144A}\u{1145A}\u{1145C}\u{1145E}-\u{114C5}\u{114C7}-\u{114CF}\u{114DA}-\u{115C0}\u{115D8}-\u{11640}\u{11644}-\u{1164F}\u{1165A}-\u{1165F}\u{1166D}-\u{116BF}\u{116CA}-\u{1172F}\u{11740}-\u{1183A}\u{1183C}-\u{118DF}\u{118F3}-\u{119E1}\u{119E3}-\u{11A3E}\u{11A47}-\u{11A99}\u{11A9D}\u{11AA3}-\u{11C40}\u{11C46}-\u{11C4F}\u{11C6D}-\u{11C6F}\u{11C72}-\u{11D4F}\u{11D5A}-\u{11D9F}\u{11DAA}-\u{11EF6}\u{11EF9}-\u{11FBF}\u{11FF2}-\u{11FFE}\u{12000}-\u{123FF}\u{1246F}\u{12475}-\u{16A5F}\u{16A6A}-\u{16A6D}\u{16A70}-\u{16AF4}\u{16AF6}-\u{16B36}\u{16B40}-\u{16B43}\u{16B46}-\u{16B4F}\u{16B5A}\u{16B62}-\u{16E7F}\u{16E9B}-\u{16FE1}\u{16FE3}-\u{1BC9B}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1CFFF}\u{1D0F6}-\u{1D0FF}\u{1D127}\u{1D128}\u{1D165}-\u{1D169}\u{1D16D}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D1E9}-\u{1D1FF}\u{1D242}-\u{1D244}\u{1D246}-\u{1D2DF}\u{1D2F4}-\u{1D2FF}\u{1D357}-\u{1D35F}\u{1D379}-\u{1D6C0}\u{1D6C2}-\u{1D6DA}\u{1D6DC}-\u{1D6FA}\u{1D6FC}-\u{1D714}\u{1D716}-\u{1D734}\u{1D736}-\u{1D74E}\u{1D750}-\u{1D76E}\u{1D770}-\u{1D788}\u{1D78A}-\u{1D7A8}\u{1D7AA}-\u{1D7C2}\u{1D7C4}-\u{1D7CD}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA8C}-\u{1E13F}\u{1E14A}-\u{1E14E}\u{1E150}-\u{1E2EF}\u{1E2FA}-\u{1E2FE}\u{1E300}-\u{1E8C6}\u{1E8D0}-\u{1E94F}\u{1E95A}-\u{1E95D}\u{1E960}-\u{1EC70}\u{1ECB5}-\u{1ED00}\u{1ED3E}-\u{1EEEF}\u{1EEF2}-\u{1EFFF}\u{1F02C}-\u{1F02F}\u{1F094}-\u{1F09F}\u{1F0AF}\u{1F0B0}\u{1F0C0}\u{1F0D0}\u{1F0F6}-\u{1F0FF}\u{1F10D}-\u{1F10F}\u{1F16D}-\u{1F16F}\u{1F1AD}-\u{1F1E5}\u{1F203}-\u{1F20F}\u{1F23C}-\u{1F23F}\u{1F249}-\u{1F24F}\u{1F252}-\u{1F25F}\u{1F266}-\u{1F2FF}\u{1F6D6}-\u{1F6DF}\u{1F6ED}-\u{1F6EF}\u{1F6FB}-\u{1F6FF}\u{1F774}-\u{1F77F}\u{1F7D9}-\u{1F7DF}\u{1F7EC}-\u{1F7FF}\u{1F80C}-\u{1F80F}\u{1F848}-\u{1F84F}\u{1F85A}-\u{1F85F}\u{1F888}-\u{1F88F}\u{1F8AE}-\u{1F8FF}\u{1F90C}\u{1F972}\u{1F977}-\u{1F979}\u{1F9A3}\u{1F9A4}\u{1F9AB}-\u{1F9AD}\u{1F9CB}\u{1F9CC}\u{1FA54}-\u{1FA5F}\u{1FA6E}\u{1FA6F}\u{1FA74}-\u{1FA77}\u{1FA7B}-\u{1FA7F}\u{1FA83}-\u{1FA8F}\u{1FA96}-\u{10FFFF}]/u).map(x => parseInt(x || 0))
  };
};

const hyphenateException = exception => {
  return {
    key: exception.replace(/\-/g, ''),
    value: exception.replace(/\-/g, defaults.joiner)
  };
};

const whiteSpaceRegex = /[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]|\x85/u;
const separatorRegex = /(?!['@_])[\t-\r -#%-\*,-\/:;\?@\[-\]_\{\}\xA0\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFEFF\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65\u{10100}-\u{10102}\u{1039F}\u{103D0}\u{1056F}\u{10857}\u{1091F}\u{1093F}\u{10A50}-\u{10A58}\u{10A7F}\u{10AF0}-\u{10AF6}\u{10B39}-\u{10B3F}\u{10B99}-\u{10B9C}\u{10F55}-\u{10F59}\u{11047}-\u{1104D}\u{110BB}\u{110BC}\u{110BE}-\u{110C1}\u{11140}-\u{11143}\u{11174}\u{11175}\u{111C5}-\u{111C8}\u{111CD}\u{111DB}\u{111DD}-\u{111DF}\u{11238}-\u{1123D}\u{112A9}\u{1144B}-\u{1144F}\u{1145B}\u{1145D}\u{114C6}\u{115C1}-\u{115D7}\u{11641}-\u{11643}\u{11660}-\u{1166C}\u{1173C}-\u{1173E}\u{1183B}\u{119E2}\u{11A3F}-\u{11A46}\u{11A9A}-\u{11A9C}\u{11A9E}-\u{11AA2}\u{11C41}-\u{11C45}\u{11C70}\u{11C71}\u{11EF7}\u{11EF8}\u{11FFF}\u{12470}-\u{12474}\u{16A6E}\u{16A6F}\u{16AF5}\u{16B37}-\u{16B3B}\u{16B44}\u{16E97}-\u{16E9A}\u{16FE2}\u{1BC9F}\u{1DA87}-\u{1DA8B}\u{1E95E}\u{1E95F}]/u;

const getSpacesAndFragments = text => {
  const fragments = [];
  let fragment = '';
  let space = '';

  const addFragment = () => {
    if (fragment.length > 0) {
      fragments.push(fragment);
      fragment = '';
    }
  };

  const addSpace = () => {
    if (space.length > 0) {
      fragments.push(space);
      space = '';
    }
  };

  for (let charIndex = 0; charIndex < text.length; charIndex++) {
    const char = text.charAt(charIndex);

    if (whiteSpaceRegex.test(char)) {
      addFragment();
      space += char;
    } else {
      addSpace();
      fragment += char;
    }
  }

  addFragment();
  addSpace();
  return fragments;
};

const getWordsAndCharacters = fragment => {
  let wordStartIndex = null;
  let charIndex;
  const words = [];

  const addCharacter = char => words.push(char);

  const addWord = characterIndex => {
    if (wordStartIndex !== null) {
      const word = fragment.slice(wordStartIndex, characterIndex);
      wordStartIndex = null;
      words.push(word);
    }
  };

  for (charIndex = 0; charIndex < fragment.length; charIndex++) {
    const char = fragment.charAt(charIndex);
    const isSeparator = separatorRegex.test(char);

    if (isSeparator) {
      addWord(charIndex);
      addCharacter(char);
    } else {
      if (wordStartIndex === null) {
        wordStartIndex = charIndex;
      }
    }
  }

  addWord(fragment.length);
  return words;
};

const parseText = (text = '') => {
  const allFragments = [];
  const spacesAndFragments = getSpacesAndFragments(text);

  if (spacesAndFragments.length) {
    let isSpace = whiteSpaceRegex.test(spacesAndFragments[0]);

    for (const fragment of spacesAndFragments) {
      if (isSpace) {
        allFragments.push(fragment);
      } else {
        const wordsAndCharacters = getWordsAndCharacters(fragment);
        allFragments.push(...wordsAndCharacters);
      }

      isSpace = !isSpace;
    }
  }

  return allFragments;
};

const isHyphenationPoint = point => point % 2 === 1;

const hyphenateByPoints = (word, points = []) => {
  let hyphenated = '';

  for (let i = 0; i < word.length; i++) {
    hyphenated += (isHyphenationPoint(points[i]) ? defaults.joiner : '') + word.charAt(i);
  }

  return hyphenated;
};

const {
  borderMarker: marker
} = defaults;
const hyphenateWord = (word, patternTrie) => {
  const pattern = marker + word.toLocaleLowerCase() + marker;
  const patternPoints = new Array(pattern.length + 1).fill(0);

  for (let i = 0; i < pattern.length; i++) {
    const fragment = pattern.slice(i);

    for (const fragmentPoints of patternTrie.getPoints(fragment)) {
      for (let j = 0; j < fragmentPoints.length; j++) {
        patternPoints[i + j] = Math.max(patternPoints[i + j], fragmentPoints[j]);
      }
    }
  } // drop the first and the last point (which correspond to the markers)
  // and then replace first two and last two points with zeros:


  const points = [0, 0, ...patternPoints.slice(3, patternPoints.length - 3), 0, 0];
  return hyphenateByPoints(word, points);
};

const createHyphenator = ({
  patterns = [],
  exceptions = []
}) => {
  const hyphenatedWords = {};
  const patternTrie = new PatternTrie();

  for (const pattern of patterns) {
    const {
      chars,
      points
    } = decodePattern(pattern);
    patternTrie.insert(chars, points);
  }

  for (const exception of exceptions) {
    const {
      key,
      value
    } = hyphenateException(exception);
    hyphenatedWords[key] = value;
  }

  return text => {
    return parseText(text).map(fragment => {
      const shouldHyphenate = fragment.length > defaults.minWordLength;

      if (shouldHyphenate) {
        if (!hyphenatedWords[fragment]) {
          const hyphenatedWord = hyphenateWord(fragment, patternTrie);
          hyphenatedWords[fragment] = hyphenatedWord;
        }

        return hyphenatedWords[fragment];
      }

      return fragment;
    }).join('');
  };
};

const createHyphenators = {};
const hyphenators = {
  get(language = enUs) {
    if (!createHyphenators[language.id]) {
      createHyphenators[language.id] = createHyphenator(language);
    }

    return createHyphenators[language.id];
  }

};

const hyphenated = (text, {
  language
} = {}) => {
  return hyphenators.get(language)(text);
};

exports.hyphenated = hyphenated;
