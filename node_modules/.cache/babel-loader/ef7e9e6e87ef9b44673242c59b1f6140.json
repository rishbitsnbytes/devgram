{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\nimport { v4 as uuid } from \"uuid\";\n/**\r\n * All the routes related to post comments are present here.\r\n * */\n\n/**\r\n * This handler handles getting all comments for a particular post in the db.\r\n * send GET Request at /api/comments/:postId\r\n * */\n\nexport const getPostCommentsHandler = function (schema, request) {\n  const postId = request.params.postId;\n\n  try {\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n    return new Response(200, {}, {\n      comments: post.comments\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles adding a comment to a particular post in the db.\r\n * send POST Request at /api/comments/add/:postId\r\n * */\n\nexport const addPostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const {\n      postId\n    } = request.params;\n    const {\n      commentData\n    } = JSON.parse(request.requestBody);\n    const comment = {\n      _id: uuid(),\n      ...commentData,\n      username: user.username,\n      profileImage: user.profileImage,\n      votes: {\n        upvotedBy: [],\n        downvotedBy: []\n      },\n      createdAt: formatDate(),\n      updatedAt: formatDate()\n    };\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n    post.comments.push(comment);\n    this.db.posts.update({\n      _id: postId\n    }, post);\n    return new Response(201, {}, {\n      comments: post.comments\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles editing a comment to a particular post in the db.\r\n * send POST Request at /api/comments/edit/:postId/:commentId\r\n * */\n\nexport const editPostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const {\n      postId,\n      commentId\n    } = request.params;\n    const {\n      commentData\n    } = JSON.parse(request.requestBody);\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n    const commentIndex = post.comments.findIndex(comment => comment._id === commentId);\n\n    if (post.comments[commentIndex].username !== user.username) {\n      return new Response(400, {}, {\n        errors: [\"Cannot edit a comment doesn't belong to the User.\"]\n      });\n    }\n\n    post.comments[commentIndex] = { ...post.comments[commentIndex],\n      ...commentData,\n      updatedAt: formatDate()\n    };\n    this.db.posts.update({\n      _id: postId\n    }, post);\n    return new Response(201, {}, {\n      comments: post.comments\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles deleting a comment to a particular post in the db.\r\n * send DELETE Request at /api/comments/delete/:postId/:commentId\r\n * */\n\nexport const deletePostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const {\n      postId,\n      commentId\n    } = request.params;\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n    const commentIndex = post.comments.findIndex(comment => comment._id === commentId);\n\n    if (post.comments[commentIndex].username !== user.username && post.username !== user.username) {\n      return new Response(400, {}, {\n        errors: [\"Cannot delete a comment doesn't belong to the User.\"]\n      });\n    }\n\n    post.comments = post.comments.filter(comment => comment._id !== commentId);\n    this.db.posts.update({\n      _id: postId\n    }, post);\n    return new Response(201, {}, {\n      comments: post.comments\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles upvoting a comment of a post in the db.\r\n * send POST Request at /api/comments/upvote/:postId/:commentId\r\n * */\n\nexport const upvotePostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const {\n      postId,\n      commentId\n    } = request.params;\n    const commentIndex = post.comments.findIndex(comment => comment._id === commentId);\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n\n    if (post.comments[commentIndex].votes.upvotedBy.some(currUser => currUser._id === user._id)) {\n      return new Response(400, {}, {\n        errors: [\"Cannot upvote a post that is already upvoted. \"]\n      });\n    }\n\n    post.comments[commentIndex].votes.downvotedBy = post.comments[commentIndex].votes.downvotedBy.filter(currUser => currUser._id !== user._id);\n    post.comments[commentIndex].votes.upvotedBy.push(user);\n    this.db.posts.update({\n      _id: postId\n    }, { ...post,\n      updatedAt: formatDate()\n    });\n    return new Response(201, {}, {\n      comments: post.comments\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles downvoting a comment of a post in the db.\r\n * send POST Request at /api/comments/downvote/:postId/:commentId\r\n * */\n\nexport const downvotePostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const {\n      postId,\n      commentId\n    } = request.params;\n    const commentIndex = post.comments.findIndex(comment => comment._id === commentId);\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n\n    if (post.comments[commentIndex].votes.downvotedBy.some(currUser => currUser._id === user._id)) {\n      return new Response(400, {}, {\n        errors: [\"Cannot downvote a post that is already downvoted. \"]\n      });\n    }\n\n    post.comments[commentIndex].votes.upvotedBy = post.comments[commentIndex].votes.upvotedBy.filter(currUser => currUser._id !== user._id);\n    post.comments[commentIndex].votes.downvotedBy.push(user);\n    this.db.posts.update({\n      _id: postId\n    }, { ...post,\n      updatedAt: formatDate()\n    });\n    return new Response(201, {}, {\n      comments: post.comments\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"names":["Response","formatDate","requiresAuth","v4","uuid","getPostCommentsHandler","schema","request","postId","params","post","posts","findBy","_id","attrs","comments","error","addPostCommentHandler","user","call","errors","commentData","JSON","parse","requestBody","comment","username","profileImage","votes","upvotedBy","downvotedBy","createdAt","updatedAt","push","db","update","editPostCommentHandler","commentId","commentIndex","findIndex","deletePostCommentHandler","filter","upvotePostCommentHandler","some","currUser","downvotePostCommentHandler"],"sources":["/Users/naruto/Documents/Github/devgram/src/backend/controllers/CommentsController.js"],"sourcesContent":["import { Response } from \"miragejs\";\r\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\n/**\r\n * All the routes related to post comments are present here.\r\n * */\r\n\r\n/**\r\n * This handler handles getting all comments for a particular post in the db.\r\n * send GET Request at /api/comments/:postId\r\n * */\r\n\r\nexport const getPostCommentsHandler = function (schema, request) {\r\n  const postId = request.params.postId;\r\n  try {\r\n    const post = schema.posts.findBy({ _id: postId }).attrs;\r\n    return new Response(200, {}, { comments: post.comments });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles adding a comment to a particular post in the db.\r\n * send POST Request at /api/comments/add/:postId\r\n * */\r\n\r\nexport const addPostCommentHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const { postId } = request.params;\r\n    const { commentData } = JSON.parse(request.requestBody);\r\n\r\n    const comment = {\r\n      _id: uuid(),\r\n      ...commentData,\r\n      username: user.username,\r\n      profileImage: user.profileImage,\r\n      votes: { upvotedBy: [], downvotedBy: [] },\r\n      createdAt: formatDate(),\r\n      updatedAt: formatDate(),\r\n    };\r\n    const post = schema.posts.findBy({ _id: postId }).attrs;\r\n    post.comments.push(comment);\r\n    this.db.posts.update({ _id: postId }, post);\r\n    return new Response(201, {}, { comments: post.comments });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles editing a comment to a particular post in the db.\r\n * send POST Request at /api/comments/edit/:postId/:commentId\r\n * */\r\n\r\nexport const editPostCommentHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const { postId, commentId } = request.params;\r\n    const { commentData } = JSON.parse(request.requestBody);\r\n    const post = schema.posts.findBy({ _id: postId }).attrs;\r\n    const commentIndex = post.comments.findIndex(\r\n      (comment) => comment._id === commentId\r\n    );\r\n    if (post.comments[commentIndex].username !== user.username) {\r\n      return new Response(\r\n        400,\r\n        {},\r\n        {\r\n          errors: [\"Cannot edit a comment doesn't belong to the User.\"],\r\n        }\r\n      );\r\n    }\r\n    post.comments[commentIndex] = {\r\n      ...post.comments[commentIndex],\r\n      ...commentData,\r\n      updatedAt: formatDate(),\r\n    };\r\n    this.db.posts.update({ _id: postId }, post);\r\n    return new Response(201, {}, { comments: post.comments });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles deleting a comment to a particular post in the db.\r\n * send DELETE Request at /api/comments/delete/:postId/:commentId\r\n * */\r\n\r\nexport const deletePostCommentHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const { postId, commentId } = request.params;\r\n    const post = schema.posts.findBy({ _id: postId }).attrs;\r\n    const commentIndex = post.comments.findIndex(\r\n      (comment) => comment._id === commentId\r\n    );\r\n    if (\r\n      post.comments[commentIndex].username !== user.username &&\r\n      post.username !== user.username\r\n    ) {\r\n      return new Response(\r\n        400,\r\n        {},\r\n        {\r\n          errors: [\"Cannot delete a comment doesn't belong to the User.\"],\r\n        }\r\n      );\r\n    }\r\n    post.comments = post.comments.filter(\r\n      (comment) => comment._id !== commentId\r\n    );\r\n    this.db.posts.update({ _id: postId }, post);\r\n    return new Response(201, {}, { comments: post.comments });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles upvoting a comment of a post in the db.\r\n * send POST Request at /api/comments/upvote/:postId/:commentId\r\n * */\r\n\r\nexport const upvotePostCommentHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const { postId, commentId } = request.params;\r\n    const commentIndex = post.comments.findIndex(\r\n      (comment) => comment._id === commentId\r\n    );\r\n    const post = schema.posts.findBy({ _id: postId }).attrs;\r\n\r\n    if (\r\n      post.comments[commentIndex].votes.upvotedBy.some(\r\n        (currUser) => currUser._id === user._id\r\n      )\r\n    ) {\r\n      return new Response(\r\n        400,\r\n        {},\r\n        { errors: [\"Cannot upvote a post that is already upvoted. \"] }\r\n      );\r\n    }\r\n    post.comments[commentIndex].votes.downvotedBy = post.comments[\r\n      commentIndex\r\n    ].votes.downvotedBy.filter((currUser) => currUser._id !== user._id);\r\n    post.comments[commentIndex].votes.upvotedBy.push(user);\r\n    this.db.posts.update({ _id: postId }, { ...post, updatedAt: formatDate() });\r\n    return new Response(201, {}, { comments: post.comments });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles downvoting a comment of a post in the db.\r\n * send POST Request at /api/comments/downvote/:postId/:commentId\r\n * */\r\n\r\nexport const downvotePostCommentHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const { postId, commentId } = request.params;\r\n    const commentIndex = post.comments.findIndex(\r\n      (comment) => comment._id === commentId\r\n    );\r\n    const post = schema.posts.findBy({ _id: postId }).attrs;\r\n\r\n    if (\r\n      post.comments[commentIndex].votes.downvotedBy.some(\r\n        (currUser) => currUser._id === user._id\r\n      )\r\n    ) {\r\n      return new Response(\r\n        400,\r\n        {},\r\n        {\r\n          errors: [\"Cannot downvote a post that is already downvoted. \"],\r\n        }\r\n      );\r\n    }\r\n    post.comments[commentIndex].votes.upvotedBy = post.comments[\r\n      commentIndex\r\n    ].votes.upvotedBy.filter((currUser) => currUser._id !== user._id);\r\n    post.comments[commentIndex].votes.downvotedBy.push(user);\r\n    this.db.posts.update({ _id: postId }, { ...post, updatedAt: formatDate() });\r\n    return new Response(201, {}, { comments: post.comments });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}