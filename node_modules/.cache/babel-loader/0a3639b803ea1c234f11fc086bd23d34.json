{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n/**\r\n * All the routes related to user are present here.\r\n * */\n\n/**\r\n * This handler handles gets all users in the db.\r\n * send GET Request at /api/users\r\n * */\n\nexport const getAllUsersHandler = function () {\n  return new Response(200, {}, {\n    users: this.db.users\n  });\n};\n/**\r\n * This handler handles get a user from userId in the db.\r\n * send GET Request at /api/users/:userId\r\n * */\n\nexport const getUserHandler = function (schema, request) {\n  const username = request.params.username;\n\n  try {\n    const user = schema.users.findBy({\n      username: username\n    }).attrs;\n    return new Response(200, {}, {\n      user\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles updating user details.\r\n * send POST Request at /api/users/edit\r\n * body contains { userData }\r\n * */\n\nexport const editUserHandler = function (schema, request) {\n  let user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const {\n      userData\n    } = JSON.parse(request.requestBody);\n    user = { ...user,\n      ...userData,\n      updatedAt: formatDate()\n    };\n    this.db.users.update({\n      _id: user._id\n    }, user);\n    return new Response(201, {}, {\n      user\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler gets all the user bookmarks from the db.\r\n * send GET Request at /api/users/bookmark/\r\n * */\n\nexport const getBookmarkPostsHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    return new Response(200, {}, {\n      bookmarks: user.bookmarks\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles adding a post to user's bookmarks in the db.\r\n * send POST Request at /api/users/bookmark/:postId/\r\n * */\n\nexport const bookmarkPostHandler = function (schema, request) {\n  const {\n    postId\n  } = request.params;\n  const post = schema.posts.findBy({\n    _id: postId\n  }).attrs;\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const isBookmarked = user.bookmarks.some(currPostId => currPostId === postId);\n\n    if (isBookmarked) {\n      return new Response(400, {}, {\n        errors: [\"This Post is already bookmarked\"]\n      });\n    }\n\n    user.bookmarks.push(post._id);\n    this.db.users.update({\n      _id: user._id\n    }, { ...user,\n      updatedAt: formatDate()\n    });\n    return new Response(200, {}, {\n      bookmarks: user.bookmarks\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles adding a post to user's bookmarks in the db.\r\n * send POST Request at /api/users/remove-bookmark/:postId/\r\n * */\n\nexport const removePostFromBookmarkHandler = function (schema, request) {\n  const {\n    postId\n  } = request.params;\n  let user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const isBookmarked = user.bookmarks.some(currPostId => currPostId === postId);\n\n    if (!isBookmarked) {\n      return new Response(400, {}, {\n        errors: [\"Post not bookmarked yet\"]\n      });\n    }\n\n    const filteredBookmarks = user.bookmarks.filter(currPostId => currPostId !== postId);\n    user = { ...user,\n      bookmarks: filteredBookmarks\n    };\n    this.db.users.update({\n      _id: user._id\n    }, { ...user,\n      updatedAt: formatDate()\n    });\n    return new Response(200, {}, {\n      bookmarks: user.bookmarks\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles follow action.\r\n * send POST Request at /api/users/follow/:followUserId/\r\n * */\n\nexport const followUserHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  const {\n    followUsername\n  } = request.params;\n  const followUser = schema.users.findBy({\n    username: followUsername\n  }).attrs;\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const isFollowing = user.following.some(currUser => currUser.username === followUser.username);\n\n    if (isFollowing) {\n      return new Response(400, {}, {\n        errors: [\"User Already following\"]\n      });\n    }\n\n    const updatedUser = { ...user,\n      following: [...user.following, { ...followUser\n      }]\n    };\n    const updatedFollowUser = { ...followUser,\n      followers: [...followUser.followers, { ...user\n      }]\n    };\n    this.db.users.update({\n      username: user.username\n    }, { ...updatedUser,\n      updatedAt: formatDate()\n    });\n    this.db.users.update({\n      username: followUser.username\n    }, { ...updatedFollowUser,\n      updatedAt: formatDate()\n    });\n    return new Response(200, {}, {\n      user: updatedUser,\n      followUser: updatedFollowUser\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles unfollow action.\r\n * send POST Request at /api/users/unfollow/:followUserId/\r\n * */\n\nexport const unfollowUserHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  const {\n    followUsername\n  } = request.params;\n  const followUser = this.db.users.findBy({\n    username: followUsername\n  });\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const isFollowing = user.following.some(currUser => currUser.username === followUser.username);\n\n    if (!isFollowing) {\n      return new Response(400, {}, {\n        errors: [\"User already not following\"]\n      });\n    }\n\n    const updatedUser = { ...user,\n      following: user.following.filter(currUser => currUser.username !== followUser.username)\n    };\n    const updatedFollowUser = { ...followUser,\n      followers: followUser.followers.filter(currUser => currUser.username !== user.username)\n    };\n    this.db.users.update({\n      username: user.username\n    }, { ...updatedUser,\n      updatedAt: formatDate()\n    });\n    this.db.users.update({\n      username: followUser.username\n    }, { ...updatedFollowUser,\n      updatedAt: formatDate()\n    });\n    return new Response(200, {}, {\n      user: updatedUser,\n      followUser: updatedFollowUser\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"names":["Response","formatDate","requiresAuth","getAllUsersHandler","users","db","getUserHandler","schema","request","username","params","user","findBy","attrs","error","editUserHandler","call","errors","userData","JSON","parse","requestBody","updatedAt","update","_id","getBookmarkPostsHandler","bookmarks","bookmarkPostHandler","postId","post","posts","isBookmarked","some","currPostId","push","removePostFromBookmarkHandler","filteredBookmarks","filter","followUserHandler","followUsername","followUser","isFollowing","following","currUser","updatedUser","updatedFollowUser","followers","unfollowUserHandler"],"sources":["/Users/naruto/Documents/Github/devgram/src/backend/controllers/UserController.js"],"sourcesContent":["import { Response } from \"miragejs\";\r\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\r\n\r\n/**\r\n * All the routes related to user are present here.\r\n * */\r\n\r\n/**\r\n * This handler handles gets all users in the db.\r\n * send GET Request at /api/users\r\n * */\r\n\r\nexport const getAllUsersHandler = function () {\r\n  return new Response(200, {}, { users: this.db.users });\r\n};\r\n\r\n/**\r\n * This handler handles get a user from userId in the db.\r\n * send GET Request at /api/users/:userId\r\n * */\r\n\r\nexport const getUserHandler = function (schema, request) {\r\n  const username = request.params.username;\r\n  try {\r\n    const user = schema.users.findBy({ username: username }).attrs;\r\n    return new Response(200, {}, { user });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles updating user details.\r\n * send POST Request at /api/users/edit\r\n * body contains { userData }\r\n * */\r\n\r\nexport const editUserHandler = function (schema, request) {\r\n  let user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const { userData } = JSON.parse(request.requestBody);\r\n    user = { ...user, ...userData, updatedAt: formatDate() };\r\n    this.db.users.update({ _id: user._id }, user);\r\n    return new Response(201, {}, { user });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler gets all the user bookmarks from the db.\r\n * send GET Request at /api/users/bookmark/\r\n * */\r\n\r\nexport const getBookmarkPostsHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    return new Response(200, {}, { bookmarks: user.bookmarks });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n/**\r\n * This handler handles adding a post to user's bookmarks in the db.\r\n * send POST Request at /api/users/bookmark/:postId/\r\n * */\r\n\r\nexport const bookmarkPostHandler = function (schema, request) {\r\n  const { postId } = request.params;\r\n  const post = schema.posts.findBy({ _id: postId }).attrs;\r\n  const user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const isBookmarked = user.bookmarks.some(\r\n      (currPostId) => currPostId === postId\r\n    );\r\n    if (isBookmarked) {\r\n      return new Response(\r\n        400,\r\n        {},\r\n        { errors: [\"This Post is already bookmarked\"] }\r\n      );\r\n    }\r\n    user.bookmarks.push(post._id);\r\n    this.db.users.update(\r\n      { _id: user._id },\r\n      { ...user, updatedAt: formatDate() }\r\n    );\r\n    return new Response(200, {}, { bookmarks: user.bookmarks });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles adding a post to user's bookmarks in the db.\r\n * send POST Request at /api/users/remove-bookmark/:postId/\r\n * */\r\n\r\nexport const removePostFromBookmarkHandler = function (schema, request) {\r\n  const { postId } = request.params;\r\n  let user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const isBookmarked = user.bookmarks.some(\r\n      (currPostId) => currPostId === postId\r\n    );\r\n    if (!isBookmarked) {\r\n      return new Response(400, {}, { errors: [\"Post not bookmarked yet\"] });\r\n    }\r\n    const filteredBookmarks = user.bookmarks.filter(\r\n      (currPostId) => currPostId !== postId\r\n    );\r\n    user = { ...user, bookmarks: filteredBookmarks };\r\n    this.db.users.update(\r\n      { _id: user._id },\r\n      { ...user, updatedAt: formatDate() }\r\n    );\r\n    return new Response(200, {}, { bookmarks: user.bookmarks });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles follow action.\r\n * send POST Request at /api/users/follow/:followUserId/\r\n * */\r\n\r\nexport const followUserHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  const { followUsername } = request.params;\r\n  const followUser = schema.users.findBy({ username: followUsername }).attrs;\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const isFollowing = user.following.some(\r\n      (currUser) => currUser.username === followUser.username\r\n    );\r\n\r\n    if (isFollowing) {\r\n      return new Response(400, {}, { errors: [\"User Already following\"] });\r\n    }\r\n\r\n    const updatedUser = {\r\n      ...user,\r\n      following: [...user.following, { ...followUser }],\r\n    };\r\n    const updatedFollowUser = {\r\n      ...followUser,\r\n      followers: [...followUser.followers, { ...user }],\r\n    };\r\n    this.db.users.update(\r\n      { username: user.username },\r\n      { ...updatedUser, updatedAt: formatDate() }\r\n    );\r\n    this.db.users.update(\r\n      { username: followUser.username },\r\n      { ...updatedFollowUser, updatedAt: formatDate() }\r\n    );\r\n    return new Response(\r\n      200,\r\n      {},\r\n      { user: updatedUser, followUser: updatedFollowUser }\r\n    );\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles unfollow action.\r\n * send POST Request at /api/users/unfollow/:followUserId/\r\n * */\r\n\r\nexport const unfollowUserHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  const { followUsername } = request.params;\r\n  const followUser = this.db.users.findBy({ username: followUsername });\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const isFollowing = user.following.some(\r\n      (currUser) => currUser.username === followUser.username\r\n    );\r\n\r\n    if (!isFollowing) {\r\n      return new Response(400, {}, { errors: [\"User already not following\"] });\r\n    }\r\n\r\n    const updatedUser = {\r\n      ...user,\r\n      following: user.following.filter(\r\n        (currUser) => currUser.username !== followUser.username\r\n      ),\r\n    };\r\n    const updatedFollowUser = {\r\n      ...followUser,\r\n      followers: followUser.followers.filter(\r\n        (currUser) => currUser.username !== user.username\r\n      ),\r\n    };\r\n    this.db.users.update(\r\n      { username: user.username },\r\n      { ...updatedUser, updatedAt: formatDate() }\r\n    );\r\n    this.db.users.update(\r\n      { username: followUser.username },\r\n      { ...updatedFollowUser, updatedAt: formatDate() }\r\n    );\r\n    return new Response(\r\n      200,\r\n      {},\r\n      { user: updatedUser, followUser: updatedFollowUser }\r\n    );\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}