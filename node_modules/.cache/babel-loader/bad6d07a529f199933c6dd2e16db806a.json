{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\nimport { v4 as uuid } from \"uuid\";\n/**\r\n * All the routes related to post are present here.\r\n * */\n\n/**\r\n * This handler handles gets all posts in the db.\r\n * send GET Request at /api/posts\r\n * */\n\nexport const getAllpostsHandler = function () {\n  return new Response(200, {}, {\n    posts: this.db.posts\n  });\n};\n/**\r\n * This handler gets post by postId in the db.\r\n * send GET Request at /api/posts/:postId\r\n * */\n\nexport const getPostHandler = function (schema, request) {\n  const postId = request.params.postId;\n\n  try {\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n    return new Response(200, {}, {\n      post\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler gets posts of a user in the db.\r\n * send GET Request at /api/posts/user/:username\r\n * */\n\nexport const getAllUserPostsHandler = function (schema, request) {\n  const {\n    username\n  } = request.params;\n\n  try {\n    var _schema$posts$where;\n\n    const posts = (_schema$posts$where = schema.posts.where({\n      username\n    })) === null || _schema$posts$where === void 0 ? void 0 : _schema$posts$where.models;\n    return new Response(200, {}, {\n      posts\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles creating a post in the db.\r\n * send POST Request at /api/user/posts/\r\n * body contains {content}\r\n * */\n\nexport const createPostHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    var _postData$postImage;\n\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const {\n      postData\n    } = JSON.parse(request.requestBody);\n    const post = {\n      _id: uuid(),\n      ...postData,\n      postImage: (_postData$postImage = postData.postImage) !== null && _postData$postImage !== void 0 ? _postData$postImage : null,\n      likes: {\n        likeCount: 0,\n        likedBy: [],\n        dislikedBy: []\n      },\n      comments: [],\n      username: user.username,\n      profileImage: user.profileImage,\n      createdAt: formatDate(),\n      updatedAt: formatDate()\n    };\n    this.db.posts.insert(post);\n    return new Response(201, {}, {\n      posts: this.db.posts\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles updating a post in the db.\r\n * send POST Request at /api/posts/edit/:postId\r\n * body contains { postData }\r\n * */\n\nexport const editPostHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const postId = request.params.postId;\n    const {\n      postData\n    } = JSON.parse(request.requestBody);\n    let post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n\n    if (post.username !== user.username) {\n      return new Response(400, {}, {\n        errors: [\"Cannot edit a Post doesn't belong to the logged in User.\"]\n      });\n    }\n\n    post = { ...post,\n      ...postData\n    };\n    this.db.posts.update({\n      _id: postId\n    }, post);\n    return new Response(201, {}, {\n      posts: this.db.posts\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles liking a post in the db.\r\n * send POST Request at /api/posts/like/:postId\r\n * */\n\nexport const likePostHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const postId = request.params.postId;\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n\n    if (post.likes.likedBy.some(currUser => currUser.username === user.username)) {\n      return new Response(400, {}, {\n        errors: [\"Cannot like a post that is already liked. \"]\n      });\n    }\n\n    post.likes.dislikedBy = post.likes.dislikedBy.filter(currUser => currUser.username !== user.username);\n    post.likes.likeCount += 1;\n    post.likes.likedBy.push(user);\n    this.db.posts.update({\n      _id: postId\n    }, { ...post,\n      updatedAt: formatDate()\n    });\n    return new Response(201, {}, {\n      posts: this.db.posts\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles disliking a post in the db.\r\n * send POST Request at /api/posts/dislike/:postId\r\n * */\n\nexport const dislikePostHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const postId = request.params.postId;\n    let post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n\n    if (post.likes.likeCount === 0) {\n      return new Response(400, {}, {\n        errors: [\"Cannot decrement like less than 0.\"]\n      });\n    }\n\n    if (post.likes.dislikedBy.some(currUser => currUser._id === user._id)) {\n      return new Response(400, {}, {\n        errors: [\"Cannot dislike a post that is already disliked. \"]\n      });\n    }\n\n    post.likes.likeCount -= 1;\n    const updatedLikedBy = post.likes.likedBy.filter(currUser => currUser.username !== user.username);\n    post.likes.dislikedBy.push(user);\n    post = { ...post,\n      likes: { ...post.likes,\n        likedBy: updatedLikedBy\n      }\n    };\n    this.db.posts.update({\n      _id: postId\n    }, { ...post,\n      updatedAt: formatDate()\n    });\n    return new Response(201, {}, {\n      posts: this.db.posts\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles deleting a post in the db.\r\n * send DELETE Request at /api/user/posts/:postId\r\n * */\n\nexport const deletePostHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const postId = request.params.postId;\n    let post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n\n    if (post.username !== user.username) {\n      return new Response(400, {}, {\n        errors: [\"Cannot delete a Post doesn't belong to the logged in User.\"]\n      });\n    }\n\n    this.db.posts.remove({\n      _id: postId\n    });\n    return new Response(201, {}, {\n      posts: this.db.posts\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"names":["Response","formatDate","requiresAuth","v4","uuid","getAllpostsHandler","posts","db","getPostHandler","schema","request","postId","params","post","findBy","_id","attrs","error","getAllUserPostsHandler","username","where","models","createPostHandler","user","call","errors","postData","JSON","parse","requestBody","postImage","likes","likeCount","likedBy","dislikedBy","comments","profileImage","createdAt","updatedAt","insert","editPostHandler","update","likePostHandler","some","currUser","filter","push","dislikePostHandler","updatedLikedBy","deletePostHandler","remove"],"sources":["/Users/naruto/Documents/Github/devgram/src/backend/controllers/PostController.js"],"sourcesContent":["import { Response } from \"miragejs\";\r\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\n/**\r\n * All the routes related to post are present here.\r\n * */\r\n\r\n/**\r\n * This handler handles gets all posts in the db.\r\n * send GET Request at /api/posts\r\n * */\r\n\r\nexport const getAllpostsHandler = function () {\r\n  return new Response(200, {}, { posts: this.db.posts });\r\n};\r\n\r\n/**\r\n * This handler gets post by postId in the db.\r\n * send GET Request at /api/posts/:postId\r\n * */\r\n\r\nexport const getPostHandler = function (schema, request) {\r\n  const postId = request.params.postId;\r\n  try {\r\n    const post = schema.posts.findBy({ _id: postId }).attrs;\r\n    return new Response(200, {}, { post });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler gets posts of a user in the db.\r\n * send GET Request at /api/posts/user/:username\r\n * */\r\n\r\nexport const getAllUserPostsHandler = function (schema, request) {\r\n  const { username } = request.params;\r\n  try {\r\n    const posts = schema.posts.where({ username })?.models;\r\n    return new Response(200, {}, { posts });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles creating a post in the db.\r\n * send POST Request at /api/user/posts/\r\n * body contains {content}\r\n * */\r\n\r\nexport const createPostHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const { postData } = JSON.parse(request.requestBody);\r\n    const post = {\r\n      _id: uuid(),\r\n      ...postData,\r\n      postImage: postData.postImage ?? null,\r\n      likes: {\r\n        likeCount: 0,\r\n        likedBy: [],\r\n        dislikedBy: [],\r\n      },\r\n      comments: [],\r\n      username: user.username,\r\n      profileImage: user.profileImage,\r\n      createdAt: formatDate(),\r\n      updatedAt: formatDate(),\r\n    };\r\n    this.db.posts.insert(post);\r\n    return new Response(201, {}, { posts: this.db.posts });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles updating a post in the db.\r\n * send POST Request at /api/posts/edit/:postId\r\n * body contains { postData }\r\n * */\r\nexport const editPostHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const postId = request.params.postId;\r\n    const { postData } = JSON.parse(request.requestBody);\r\n    let post = schema.posts.findBy({ _id: postId }).attrs;\r\n    if (post.username !== user.username) {\r\n      return new Response(\r\n        400,\r\n        {},\r\n        {\r\n          errors: [\"Cannot edit a Post doesn't belong to the logged in User.\"],\r\n        }\r\n      );\r\n    }\r\n    post = { ...post, ...postData };\r\n    this.db.posts.update({ _id: postId }, post);\r\n    return new Response(201, {}, { posts: this.db.posts });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles liking a post in the db.\r\n * send POST Request at /api/posts/like/:postId\r\n * */\r\n\r\nexport const likePostHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const postId = request.params.postId;\r\n    const post = schema.posts.findBy({ _id: postId }).attrs;\r\n    if (\r\n      post.likes.likedBy.some((currUser) => currUser.username === user.username)\r\n    ) {\r\n      return new Response(\r\n        400,\r\n        {},\r\n        { errors: [\"Cannot like a post that is already liked. \"] }\r\n      );\r\n    }\r\n    post.likes.dislikedBy = post.likes.dislikedBy.filter(\r\n      (currUser) => currUser.username !== user.username\r\n    );\r\n    post.likes.likeCount += 1;\r\n    post.likes.likedBy.push(user);\r\n    this.db.posts.update({ _id: postId }, { ...post, updatedAt: formatDate() });\r\n    return new Response(201, {}, { posts: this.db.posts });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles disliking a post in the db.\r\n * send POST Request at /api/posts/dislike/:postId\r\n * */\r\n\r\nexport const dislikePostHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const postId = request.params.postId;\r\n    let post = schema.posts.findBy({ _id: postId }).attrs;\r\n    if (post.likes.likeCount === 0) {\r\n      return new Response(\r\n        400,\r\n        {},\r\n        { errors: [\"Cannot decrement like less than 0.\"] }\r\n      );\r\n    }\r\n    if (post.likes.dislikedBy.some((currUser) => currUser._id === user._id)) {\r\n      return new Response(\r\n        400,\r\n        {},\r\n        { errors: [\"Cannot dislike a post that is already disliked. \"] }\r\n      );\r\n    }\r\n    post.likes.likeCount -= 1;\r\n    const updatedLikedBy = post.likes.likedBy.filter(\r\n      (currUser) => currUser.username !== user.username\r\n    );\r\n    post.likes.dislikedBy.push(user);\r\n    post = { ...post, likes: { ...post.likes, likedBy: updatedLikedBy } };\r\n    this.db.posts.update({ _id: postId }, { ...post, updatedAt: formatDate() });\r\n    return new Response(201, {}, { posts: this.db.posts });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles deleting a post in the db.\r\n * send DELETE Request at /api/user/posts/:postId\r\n * */\r\nexport const deletePostHandler = function (schema, request) {\r\n  const user = requiresAuth.call(this, request);\r\n  try {\r\n    if (!user) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    const postId = request.params.postId;\r\n    let post = schema.posts.findBy({ _id: postId }).attrs;\r\n    if (post.username !== user.username) {\r\n      return new Response(\r\n        400,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"Cannot delete a Post doesn't belong to the logged in User.\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    this.db.posts.remove({ _id: postId });\r\n    return new Response(201, {}, { posts: this.db.posts });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,UAAzB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,oBAAzC;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,kBAAkB,GAAG,YAAY;EAC5C,OAAO,IAAIL,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;IAAEM,KAAK,EAAE,KAAKC,EAAL,CAAQD;EAAjB,CAAtB,CAAP;AACD,CAFM;AAIP;AACA;AACA;AACA;;AAEA,OAAO,MAAME,cAAc,GAAG,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;EACvD,MAAMC,MAAM,GAAGD,OAAO,CAACE,MAAR,CAAeD,MAA9B;;EACA,IAAI;IACF,MAAME,IAAI,GAAGJ,MAAM,CAACH,KAAP,CAAaQ,MAAb,CAAoB;MAAEC,GAAG,EAAEJ;IAAP,CAApB,EAAqCK,KAAlD;IACA,OAAO,IAAIhB,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;MAAEa;IAAF,CAAtB,CAAP;EACD,CAHD,CAGE,OAAOI,KAAP,EAAc;IACd,OAAO,IAAIjB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;MACEiB;IADF,CAHK,CAAP;EAOD;AACF,CAdM;AAgBP;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,sBAAsB,GAAG,UAAUT,MAAV,EAAkBC,OAAlB,EAA2B;EAC/D,MAAM;IAAES;EAAF,IAAeT,OAAO,CAACE,MAA7B;;EACA,IAAI;IAAA;;IACF,MAAMN,KAAK,0BAAGG,MAAM,CAACH,KAAP,CAAac,KAAb,CAAmB;MAAED;IAAF,CAAnB,CAAH,wDAAG,oBAAkCE,MAAhD;IACA,OAAO,IAAIrB,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;MAAEM;IAAF,CAAtB,CAAP;EACD,CAHD,CAGE,OAAOW,KAAP,EAAc;IACd,OAAO,IAAIjB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;MACEiB;IADF,CAHK,CAAP;EAOD;AACF,CAdM;AAgBP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMK,iBAAiB,GAAG,UAAUb,MAAV,EAAkBC,OAAlB,EAA2B;EAC1D,MAAMa,IAAI,GAAGrB,YAAY,CAACsB,IAAb,CAAkB,IAAlB,EAAwBd,OAAxB,CAAb;;EACA,IAAI;IAAA;;IACF,IAAI,CAACa,IAAL,EAAW;MACT,OAAO,IAAIvB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QACEyB,MAAM,EAAE,CACN,6DADM;MADV,CAHK,CAAP;IASD;;IACD,MAAM;MAAEC;IAAF,IAAeC,IAAI,CAACC,KAAL,CAAWlB,OAAO,CAACmB,WAAnB,CAArB;IACA,MAAMhB,IAAI,GAAG;MACXE,GAAG,EAAEX,IAAI,EADE;MAEX,GAAGsB,QAFQ;MAGXI,SAAS,yBAAEJ,QAAQ,CAACI,SAAX,qEAAwB,IAHtB;MAIXC,KAAK,EAAE;QACLC,SAAS,EAAE,CADN;QAELC,OAAO,EAAE,EAFJ;QAGLC,UAAU,EAAE;MAHP,CAJI;MASXC,QAAQ,EAAE,EATC;MAUXhB,QAAQ,EAAEI,IAAI,CAACJ,QAVJ;MAWXiB,YAAY,EAAEb,IAAI,CAACa,YAXR;MAYXC,SAAS,EAAEpC,UAAU,EAZV;MAaXqC,SAAS,EAAErC,UAAU;IAbV,CAAb;IAeA,KAAKM,EAAL,CAAQD,KAAR,CAAciC,MAAd,CAAqB1B,IAArB;IACA,OAAO,IAAIb,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;MAAEM,KAAK,EAAE,KAAKC,EAAL,CAAQD;IAAjB,CAAtB,CAAP;EACD,CA9BD,CA8BE,OAAOW,KAAP,EAAc;IACd,OAAO,IAAIjB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;MACEiB;IADF,CAHK,CAAP;EAOD;AACF,CAzCM;AA2CP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMuB,eAAe,GAAG,UAAU/B,MAAV,EAAkBC,OAAlB,EAA2B;EACxD,MAAMa,IAAI,GAAGrB,YAAY,CAACsB,IAAb,CAAkB,IAAlB,EAAwBd,OAAxB,CAAb;;EACA,IAAI;IACF,IAAI,CAACa,IAAL,EAAW;MACT,OAAO,IAAIvB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QACEyB,MAAM,EAAE,CACN,6DADM;MADV,CAHK,CAAP;IASD;;IACD,MAAMd,MAAM,GAAGD,OAAO,CAACE,MAAR,CAAeD,MAA9B;IACA,MAAM;MAAEe;IAAF,IAAeC,IAAI,CAACC,KAAL,CAAWlB,OAAO,CAACmB,WAAnB,CAArB;IACA,IAAIhB,IAAI,GAAGJ,MAAM,CAACH,KAAP,CAAaQ,MAAb,CAAoB;MAAEC,GAAG,EAAEJ;IAAP,CAApB,EAAqCK,KAAhD;;IACA,IAAIH,IAAI,CAACM,QAAL,KAAkBI,IAAI,CAACJ,QAA3B,EAAqC;MACnC,OAAO,IAAInB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QACEyB,MAAM,EAAE,CAAC,0DAAD;MADV,CAHK,CAAP;IAOD;;IACDZ,IAAI,GAAG,EAAE,GAAGA,IAAL;MAAW,GAAGa;IAAd,CAAP;IACA,KAAKnB,EAAL,CAAQD,KAAR,CAAcmC,MAAd,CAAqB;MAAE1B,GAAG,EAAEJ;IAAP,CAArB,EAAsCE,IAAtC;IACA,OAAO,IAAIb,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;MAAEM,KAAK,EAAE,KAAKC,EAAL,CAAQD;IAAjB,CAAtB,CAAP;EACD,CA3BD,CA2BE,OAAOW,KAAP,EAAc;IACd,OAAO,IAAIjB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;MACEiB;IADF,CAHK,CAAP;EAOD;AACF,CAtCM;AAwCP;AACA;AACA;AACA;;AAEA,OAAO,MAAMyB,eAAe,GAAG,UAAUjC,MAAV,EAAkBC,OAAlB,EAA2B;EACxD,MAAMa,IAAI,GAAGrB,YAAY,CAACsB,IAAb,CAAkB,IAAlB,EAAwBd,OAAxB,CAAb;;EACA,IAAI;IACF,IAAI,CAACa,IAAL,EAAW;MACT,OAAO,IAAIvB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QACEyB,MAAM,EAAE,CACN,6DADM;MADV,CAHK,CAAP;IASD;;IACD,MAAMd,MAAM,GAAGD,OAAO,CAACE,MAAR,CAAeD,MAA9B;IACA,MAAME,IAAI,GAAGJ,MAAM,CAACH,KAAP,CAAaQ,MAAb,CAAoB;MAAEC,GAAG,EAAEJ;IAAP,CAApB,EAAqCK,KAAlD;;IACA,IACEH,IAAI,CAACkB,KAAL,CAAWE,OAAX,CAAmBU,IAAnB,CAAyBC,QAAD,IAAcA,QAAQ,CAACzB,QAAT,KAAsBI,IAAI,CAACJ,QAAjE,CADF,EAEE;MACA,OAAO,IAAInB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QAAEyB,MAAM,EAAE,CAAC,4CAAD;MAAV,CAHK,CAAP;IAKD;;IACDZ,IAAI,CAACkB,KAAL,CAAWG,UAAX,GAAwBrB,IAAI,CAACkB,KAAL,CAAWG,UAAX,CAAsBW,MAAtB,CACrBD,QAAD,IAAcA,QAAQ,CAACzB,QAAT,KAAsBI,IAAI,CAACJ,QADnB,CAAxB;IAGAN,IAAI,CAACkB,KAAL,CAAWC,SAAX,IAAwB,CAAxB;IACAnB,IAAI,CAACkB,KAAL,CAAWE,OAAX,CAAmBa,IAAnB,CAAwBvB,IAAxB;IACA,KAAKhB,EAAL,CAAQD,KAAR,CAAcmC,MAAd,CAAqB;MAAE1B,GAAG,EAAEJ;IAAP,CAArB,EAAsC,EAAE,GAAGE,IAAL;MAAWyB,SAAS,EAAErC,UAAU;IAAhC,CAAtC;IACA,OAAO,IAAID,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;MAAEM,KAAK,EAAE,KAAKC,EAAL,CAAQD;IAAjB,CAAtB,CAAP;EACD,CA9BD,CA8BE,OAAOW,KAAP,EAAc;IACd,OAAO,IAAIjB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;MACEiB;IADF,CAHK,CAAP;EAOD;AACF,CAzCM;AA2CP;AACA;AACA;AACA;;AAEA,OAAO,MAAM8B,kBAAkB,GAAG,UAAUtC,MAAV,EAAkBC,OAAlB,EAA2B;EAC3D,MAAMa,IAAI,GAAGrB,YAAY,CAACsB,IAAb,CAAkB,IAAlB,EAAwBd,OAAxB,CAAb;;EACA,IAAI;IACF,IAAI,CAACa,IAAL,EAAW;MACT,OAAO,IAAIvB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QACEyB,MAAM,EAAE,CACN,6DADM;MADV,CAHK,CAAP;IASD;;IACD,MAAMd,MAAM,GAAGD,OAAO,CAACE,MAAR,CAAeD,MAA9B;IACA,IAAIE,IAAI,GAAGJ,MAAM,CAACH,KAAP,CAAaQ,MAAb,CAAoB;MAAEC,GAAG,EAAEJ;IAAP,CAApB,EAAqCK,KAAhD;;IACA,IAAIH,IAAI,CAACkB,KAAL,CAAWC,SAAX,KAAyB,CAA7B,EAAgC;MAC9B,OAAO,IAAIhC,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QAAEyB,MAAM,EAAE,CAAC,oCAAD;MAAV,CAHK,CAAP;IAKD;;IACD,IAAIZ,IAAI,CAACkB,KAAL,CAAWG,UAAX,CAAsBS,IAAtB,CAA4BC,QAAD,IAAcA,QAAQ,CAAC7B,GAAT,KAAiBQ,IAAI,CAACR,GAA/D,CAAJ,EAAyE;MACvE,OAAO,IAAIf,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QAAEyB,MAAM,EAAE,CAAC,kDAAD;MAAV,CAHK,CAAP;IAKD;;IACDZ,IAAI,CAACkB,KAAL,CAAWC,SAAX,IAAwB,CAAxB;IACA,MAAMgB,cAAc,GAAGnC,IAAI,CAACkB,KAAL,CAAWE,OAAX,CAAmBY,MAAnB,CACpBD,QAAD,IAAcA,QAAQ,CAACzB,QAAT,KAAsBI,IAAI,CAACJ,QADpB,CAAvB;IAGAN,IAAI,CAACkB,KAAL,CAAWG,UAAX,CAAsBY,IAAtB,CAA2BvB,IAA3B;IACAV,IAAI,GAAG,EAAE,GAAGA,IAAL;MAAWkB,KAAK,EAAE,EAAE,GAAGlB,IAAI,CAACkB,KAAV;QAAiBE,OAAO,EAAEe;MAA1B;IAAlB,CAAP;IACA,KAAKzC,EAAL,CAAQD,KAAR,CAAcmC,MAAd,CAAqB;MAAE1B,GAAG,EAAEJ;IAAP,CAArB,EAAsC,EAAE,GAAGE,IAAL;MAAWyB,SAAS,EAAErC,UAAU;IAAhC,CAAtC;IACA,OAAO,IAAID,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;MAAEM,KAAK,EAAE,KAAKC,EAAL,CAAQD;IAAjB,CAAtB,CAAP;EACD,CApCD,CAoCE,OAAOW,KAAP,EAAc;IACd,OAAO,IAAIjB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;MACEiB;IADF,CAHK,CAAP;EAOD;AACF,CA/CM;AAiDP;AACA;AACA;AACA;;AACA,OAAO,MAAMgC,iBAAiB,GAAG,UAAUxC,MAAV,EAAkBC,OAAlB,EAA2B;EAC1D,MAAMa,IAAI,GAAGrB,YAAY,CAACsB,IAAb,CAAkB,IAAlB,EAAwBd,OAAxB,CAAb;;EACA,IAAI;IACF,IAAI,CAACa,IAAL,EAAW;MACT,OAAO,IAAIvB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QACEyB,MAAM,EAAE,CACN,6DADM;MADV,CAHK,CAAP;IASD;;IACD,MAAMd,MAAM,GAAGD,OAAO,CAACE,MAAR,CAAeD,MAA9B;IACA,IAAIE,IAAI,GAAGJ,MAAM,CAACH,KAAP,CAAaQ,MAAb,CAAoB;MAAEC,GAAG,EAAEJ;IAAP,CAApB,EAAqCK,KAAhD;;IACA,IAAIH,IAAI,CAACM,QAAL,KAAkBI,IAAI,CAACJ,QAA3B,EAAqC;MACnC,OAAO,IAAInB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QACEyB,MAAM,EAAE,CACN,4DADM;MADV,CAHK,CAAP;IASD;;IACD,KAAKlB,EAAL,CAAQD,KAAR,CAAc4C,MAAd,CAAqB;MAAEnC,GAAG,EAAEJ;IAAP,CAArB;IACA,OAAO,IAAIX,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;MAAEM,KAAK,EAAE,KAAKC,EAAL,CAAQD;IAAjB,CAAtB,CAAP;EACD,CA3BD,CA2BE,OAAOW,KAAP,EAAc;IACd,OAAO,IAAIjB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;MACEiB;IADF,CAHK,CAAP;EAOD;AACF,CAtCM"},"metadata":{},"sourceType":"module"}