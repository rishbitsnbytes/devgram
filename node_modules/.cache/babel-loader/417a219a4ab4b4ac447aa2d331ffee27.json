{"ast":null,"code":"var createObject = Object.create;\n\nfunction createMap() {\n  var map = createObject(null);\n  map[\"__\"] = undefined;\n  delete map[\"__\"];\n  return map;\n}\n\nvar Target = function Target(path, matcher, delegate) {\n  this.path = path;\n  this.matcher = matcher;\n  this.delegate = delegate;\n};\n\nTarget.prototype.to = function to(target, callback) {\n  var delegate = this.delegate;\n\n  if (delegate && delegate.willAddRoute) {\n    target = delegate.willAddRoute(this.matcher.target, target);\n  }\n\n  this.matcher.add(this.path, target);\n\n  if (callback) {\n    if (callback.length === 0) {\n      throw new Error(\"You must have an argument in the function passed to `to`\");\n    }\n\n    this.matcher.addChild(this.path, target, callback, this.delegate);\n  }\n};\n\nvar Matcher = function Matcher(target) {\n  this.routes = createMap();\n  this.children = createMap();\n  this.target = target;\n};\n\nMatcher.prototype.add = function add(path, target) {\n  this.routes[path] = target;\n};\n\nMatcher.prototype.addChild = function addChild(path, target, callback, delegate) {\n  var matcher = new Matcher(target);\n  this.children[path] = matcher;\n  var match = generateMatch(path, matcher, delegate);\n\n  if (delegate && delegate.contextEntered) {\n    delegate.contextEntered(target, match);\n  }\n\n  callback(match);\n};\n\nfunction generateMatch(startingPath, matcher, delegate) {\n  function match(path, callback) {\n    var fullPath = startingPath + path;\n\n    if (callback) {\n      callback(generateMatch(fullPath, matcher, delegate));\n    } else {\n      return new Target(fullPath, matcher, delegate);\n    }\n  }\n\n  return match;\n}\n\nfunction addRoute(routeArray, path, handler) {\n  var len = 0;\n\n  for (var i = 0; i < routeArray.length; i++) {\n    len += routeArray[i].path.length;\n  }\n\n  path = path.substr(len);\n  var route = {\n    path: path,\n    handler: handler\n  };\n  routeArray.push(route);\n}\n\nfunction eachRoute(baseRoute, matcher, callback, binding) {\n  var routes = matcher.routes;\n  var paths = Object.keys(routes);\n\n  for (var i = 0; i < paths.length; i++) {\n    var path = paths[i];\n    var routeArray = baseRoute.slice();\n    addRoute(routeArray, path, routes[path]);\n    var nested = matcher.children[path];\n\n    if (nested) {\n      eachRoute(routeArray, nested, callback, binding);\n    } else {\n      callback.call(binding, routeArray);\n    }\n  }\n}\n\nvar map = function (callback, addRouteCallback) {\n  var matcher = new Matcher();\n  callback(generateMatch(\"\", matcher, this.delegate));\n  eachRoute([], matcher, function (routes) {\n    if (addRouteCallback) {\n      addRouteCallback(this, routes);\n    } else {\n      this.add(routes);\n    }\n  }, this);\n}; // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n// chars are \"/\" and \"%\".\n// Safe to call multiple times on the same path.\n// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n\n\nfunction normalizePath(path) {\n  return path.split(\"/\").map(normalizeSegment).join(\"/\");\n} // We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n// form when normalizing paths, so replace them with their encoded form after\n// decoding the rest of the path\n\n\nvar SEGMENT_RESERVED_CHARS = /%|\\//g;\n\nfunction normalizeSegment(segment) {\n  if (segment.length < 3 || segment.indexOf(\"%\") === -1) {\n    return segment;\n  }\n\n  return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n} // We do not want to encode these characters when generating dynamic path segments\n// See https://tools.ietf.org/html/rfc3986#section-3.3\n// sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n// others allowed by RFC 3986: \":\", \"@\"\n//\n// First encode the entire path segment, then decode any of the encoded special chars.\n//\n// The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n// so the possible encoded chars are:\n// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\n\n\nvar PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;\n\nfunction encodePathSegment(str) {\n  return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n}\n\nvar escapeRegex = /(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)/g;\nvar isArray = Array.isArray;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction getParam(params, key) {\n  if (typeof params !== \"object\" || params === null) {\n    throw new Error(\"You must pass an object as the second argument to `generate`.\");\n  }\n\n  if (!hasOwnProperty.call(params, key)) {\n    throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n  }\n\n  var value = params[key];\n  var str = typeof value === \"string\" ? value : \"\" + value;\n\n  if (str.length === 0) {\n    throw new Error(\"You must provide a param `\" + key + \"`.\");\n  }\n\n  return str;\n}\n\nvar eachChar = [];\n\neachChar[0\n/* Static */\n] = function (segment, currentState) {\n  var state = currentState;\n  var value = segment.value;\n\n  for (var i = 0; i < value.length; i++) {\n    var ch = value.charCodeAt(i);\n    state = state.put(ch, false, false);\n  }\n\n  return state;\n};\n\neachChar[1\n/* Dynamic */\n] = function (_, currentState) {\n  return currentState.put(47\n  /* SLASH */\n  , true, true);\n};\n\neachChar[2\n/* Star */\n] = function (_, currentState) {\n  return currentState.put(-1\n  /* ANY */\n  , false, true);\n};\n\neachChar[4\n/* Epsilon */\n] = function (_, currentState) {\n  return currentState;\n};\n\nvar regex = [];\n\nregex[0\n/* Static */\n] = function (segment) {\n  return segment.value.replace(escapeRegex, \"\\\\$1\");\n};\n\nregex[1\n/* Dynamic */\n] = function () {\n  return \"([^/]+)\";\n};\n\nregex[2\n/* Star */\n] = function () {\n  return \"(.+)\";\n};\n\nregex[4\n/* Epsilon */\n] = function () {\n  return \"\";\n};\n\nvar generate = [];\n\ngenerate[0\n/* Static */\n] = function (segment) {\n  return segment.value;\n};\n\ngenerate[1\n/* Dynamic */\n] = function (segment, params) {\n  var value = getParam(params, segment.value);\n\n  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n    return encodePathSegment(value);\n  } else {\n    return value;\n  }\n};\n\ngenerate[2\n/* Star */\n] = function (segment, params) {\n  return getParam(params, segment.value);\n};\n\ngenerate[4\n/* Epsilon */\n] = function () {\n  return \"\";\n};\n\nvar EmptyObject = Object.freeze({});\nvar EmptyArray = Object.freeze([]); // The `names` will be populated with the paramter name for each dynamic/star\n// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n// segment, indicating whether it should be decoded during recognition.\n\nfunction parse(segments, route, types) {\n  // normalize route as not starting with a \"/\". Recognition will\n  // also normalize.\n  if (route.length > 0 && route.charCodeAt(0) === 47\n  /* SLASH */\n  ) {\n    route = route.substr(1);\n  }\n\n  var parts = route.split(\"/\");\n  var names = undefined;\n  var shouldDecodes = undefined;\n\n  for (var i = 0; i < parts.length; i++) {\n    var part = parts[i];\n    var flags = 0;\n    var type = 0;\n\n    if (part === \"\") {\n      type = 4\n      /* Epsilon */\n      ;\n    } else if (part.charCodeAt(0) === 58\n    /* COLON */\n    ) {\n      type = 1\n      /* Dynamic */\n      ;\n    } else if (part.charCodeAt(0) === 42\n    /* STAR */\n    ) {\n      type = 2\n      /* Star */\n      ;\n    } else {\n      type = 0\n      /* Static */\n      ;\n    }\n\n    flags = 2 << type;\n\n    if (flags & 12\n    /* Named */\n    ) {\n      part = part.slice(1);\n      names = names || [];\n      names.push(part);\n      shouldDecodes = shouldDecodes || [];\n      shouldDecodes.push((flags & 4\n      /* Decoded */\n      ) !== 0);\n    }\n\n    if (flags & 14\n    /* Counted */\n    ) {\n      types[type]++;\n    }\n\n    segments.push({\n      type: type,\n      value: normalizeSegment(part)\n    });\n  }\n\n  return {\n    names: names || EmptyArray,\n    shouldDecodes: shouldDecodes || EmptyArray\n  };\n}\n\nfunction isEqualCharSpec(spec, char, negate) {\n  return spec.char === char && spec.negate === negate;\n} // A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\n\n\nvar State = function State(states, id, char, negate, repeat) {\n  this.states = states;\n  this.id = id;\n  this.char = char;\n  this.negate = negate;\n  this.nextStates = repeat ? id : null;\n  this.pattern = \"\";\n  this._regex = undefined;\n  this.handlers = undefined;\n  this.types = undefined;\n};\n\nState.prototype.regex = function regex$1() {\n  if (!this._regex) {\n    this._regex = new RegExp(this.pattern);\n  }\n\n  return this._regex;\n};\n\nState.prototype.get = function get(char, negate) {\n  var this$1 = this;\n  var nextStates = this.nextStates;\n\n  if (nextStates === null) {\n    return;\n  }\n\n  if (isArray(nextStates)) {\n    for (var i = 0; i < nextStates.length; i++) {\n      var child = this$1.states[nextStates[i]];\n\n      if (isEqualCharSpec(child, char, negate)) {\n        return child;\n      }\n    }\n  } else {\n    var child$1 = this.states[nextStates];\n\n    if (isEqualCharSpec(child$1, char, negate)) {\n      return child$1;\n    }\n  }\n};\n\nState.prototype.put = function put(char, negate, repeat) {\n  var state; // If the character specification already exists in a child of the current\n  // state, just return that state.\n\n  if (state = this.get(char, negate)) {\n    return state;\n  } // Make a new state for the character spec\n\n\n  var states = this.states;\n  state = new State(states, states.length, char, negate, repeat);\n  states[states.length] = state; // Insert the new state as a child of the current state\n\n  if (this.nextStates == null) {\n    this.nextStates = state.id;\n  } else if (isArray(this.nextStates)) {\n    this.nextStates.push(state.id);\n  } else {\n    this.nextStates = [this.nextStates, state.id];\n  } // Return the new state\n\n\n  return state;\n}; // Find a list of child states matching the next character\n\n\nState.prototype.match = function match(ch) {\n  var this$1 = this;\n  var nextStates = this.nextStates;\n\n  if (!nextStates) {\n    return [];\n  }\n\n  var returned = [];\n\n  if (isArray(nextStates)) {\n    for (var i = 0; i < nextStates.length; i++) {\n      var child = this$1.states[nextStates[i]];\n\n      if (isMatch(child, ch)) {\n        returned.push(child);\n      }\n    }\n  } else {\n    var child$1 = this.states[nextStates];\n\n    if (isMatch(child$1, ch)) {\n      returned.push(child$1);\n    }\n  }\n\n  return returned;\n};\n\nfunction isMatch(spec, char) {\n  return spec.negate ? spec.char !== char && spec.char !== -1\n  /* ANY */\n  : spec.char === char || spec.char === -1\n  /* ANY */\n  ;\n} // This is a somewhat naive strategy, but should work in a lot of cases\n// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n//\n// This strategy generally prefers more static and less dynamic matching.\n// Specifically, it\n//\n//  * prefers fewer stars to more, then\n//  * prefers using stars for less of the match to more, then\n//  * prefers fewer dynamic segments to more, then\n//  * prefers more static segments to more\n\n\nfunction sortSolutions(states) {\n  return states.sort(function (a, b) {\n    var ref = a.types || [0, 0, 0];\n    var astatics = ref[0];\n    var adynamics = ref[1];\n    var astars = ref[2];\n    var ref$1 = b.types || [0, 0, 0];\n    var bstatics = ref$1[0];\n    var bdynamics = ref$1[1];\n    var bstars = ref$1[2];\n\n    if (astars !== bstars) {\n      return astars - bstars;\n    }\n\n    if (astars) {\n      if (astatics !== bstatics) {\n        return bstatics - astatics;\n      }\n\n      if (adynamics !== bdynamics) {\n        return bdynamics - adynamics;\n      }\n    }\n\n    if (adynamics !== bdynamics) {\n      return adynamics - bdynamics;\n    }\n\n    if (astatics !== bstatics) {\n      return bstatics - astatics;\n    }\n\n    return 0;\n  });\n}\n\nfunction recognizeChar(states, ch) {\n  var nextStates = [];\n\n  for (var i = 0, l = states.length; i < l; i++) {\n    var state = states[i];\n    nextStates = nextStates.concat(state.match(ch));\n  }\n\n  return nextStates;\n}\n\nvar RecognizeResults = function RecognizeResults(queryParams) {\n  this.length = 0;\n  this.queryParams = queryParams || {};\n};\n\nRecognizeResults.prototype.splice = Array.prototype.splice;\nRecognizeResults.prototype.slice = Array.prototype.slice;\nRecognizeResults.prototype.push = Array.prototype.push;\n\nfunction findHandler(state, originalPath, queryParams) {\n  var handlers = state.handlers;\n  var regex = state.regex();\n\n  if (!regex || !handlers) {\n    throw new Error(\"state not initialized\");\n  }\n\n  var captures = originalPath.match(regex);\n  var currentCapture = 1;\n  var result = new RecognizeResults(queryParams);\n  result.length = handlers.length;\n\n  for (var i = 0; i < handlers.length; i++) {\n    var handler = handlers[i];\n    var names = handler.names;\n    var shouldDecodes = handler.shouldDecodes;\n    var params = EmptyObject;\n    var isDynamic = false;\n\n    if (names !== EmptyArray && shouldDecodes !== EmptyArray) {\n      for (var j = 0; j < names.length; j++) {\n        isDynamic = true;\n        var name = names[j];\n        var capture = captures && captures[currentCapture++];\n\n        if (params === EmptyObject) {\n          params = {};\n        }\n\n        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {\n          params[name] = capture && decodeURIComponent(capture);\n        } else {\n          params[name] = capture;\n        }\n      }\n    }\n\n    result[i] = {\n      handler: handler.handler,\n      params: params,\n      isDynamic: isDynamic\n    };\n  }\n\n  return result;\n}\n\nfunction decodeQueryParamPart(part) {\n  // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n  part = part.replace(/\\+/gm, \"%20\");\n  var result;\n\n  try {\n    result = decodeURIComponent(part);\n  } catch (error) {\n    result = \"\";\n  }\n\n  return result;\n}\n\nvar RouteRecognizer = function RouteRecognizer() {\n  this.names = createMap();\n  var states = [];\n  var state = new State(states, 0, -1\n  /* ANY */\n  , true, false);\n  states[0] = state;\n  this.states = states;\n  this.rootState = state;\n};\n\nRouteRecognizer.prototype.add = function add(routes, options) {\n  var currentState = this.rootState;\n  var pattern = \"^\";\n  var types = [0, 0, 0];\n  var handlers = new Array(routes.length);\n  var allSegments = [];\n  var isEmpty = true;\n  var j = 0;\n\n  for (var i = 0; i < routes.length; i++) {\n    var route = routes[i];\n    var ref = parse(allSegments, route.path, types);\n    var names = ref.names;\n    var shouldDecodes = ref.shouldDecodes; // preserve j so it points to the start of newly added segments\n\n    for (; j < allSegments.length; j++) {\n      var segment = allSegments[j];\n\n      if (segment.type === 4\n      /* Epsilon */\n      ) {\n        continue;\n      }\n\n      isEmpty = false; // Add a \"/\" for the new segment\n\n      currentState = currentState.put(47\n      /* SLASH */\n      , false, false);\n      pattern += \"/\"; // Add a representation of the segment to the NFA and regex\n\n      currentState = eachChar[segment.type](segment, currentState);\n      pattern += regex[segment.type](segment);\n    }\n\n    handlers[i] = {\n      handler: route.handler,\n      names: names,\n      shouldDecodes: shouldDecodes\n    };\n  }\n\n  if (isEmpty) {\n    currentState = currentState.put(47\n    /* SLASH */\n    , false, false);\n    pattern += \"/\";\n  }\n\n  currentState.handlers = handlers;\n  currentState.pattern = pattern + \"$\";\n  currentState.types = types;\n  var name;\n\n  if (typeof options === \"object\" && options !== null && options.as) {\n    name = options.as;\n  }\n\n  if (name) {\n    // if (this.names[name]) {\n    //   throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n    // }\n    this.names[name] = {\n      segments: allSegments,\n      handlers: handlers\n    };\n  }\n};\n\nRouteRecognizer.prototype.handlersFor = function handlersFor(name) {\n  var route = this.names[name];\n\n  if (!route) {\n    throw new Error(\"There is no route named \" + name);\n  }\n\n  var result = new Array(route.handlers.length);\n\n  for (var i = 0; i < route.handlers.length; i++) {\n    var handler = route.handlers[i];\n    result[i] = handler;\n  }\n\n  return result;\n};\n\nRouteRecognizer.prototype.hasRoute = function hasRoute(name) {\n  return !!this.names[name];\n};\n\nRouteRecognizer.prototype.generate = function generate$1(name, params) {\n  var route = this.names[name];\n  var output = \"\";\n\n  if (!route) {\n    throw new Error(\"There is no route named \" + name);\n  }\n\n  var segments = route.segments;\n\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n\n    if (segment.type === 4\n    /* Epsilon */\n    ) {\n      continue;\n    }\n\n    output += \"/\";\n    output += generate[segment.type](segment, params);\n  }\n\n  if (output.charAt(0) !== \"/\") {\n    output = \"/\" + output;\n  }\n\n  if (params && params.queryParams) {\n    output += this.generateQueryString(params.queryParams);\n  }\n\n  return output;\n};\n\nRouteRecognizer.prototype.generateQueryString = function generateQueryString(params) {\n  var pairs = [];\n  var keys = Object.keys(params);\n  keys.sort();\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = params[key];\n\n    if (value == null) {\n      continue;\n    }\n\n    var pair = encodeURIComponent(key);\n\n    if (isArray(value)) {\n      for (var j = 0; j < value.length; j++) {\n        var arrayPair = key + \"[]\" + \"=\" + encodeURIComponent(value[j]);\n        pairs.push(arrayPair);\n      }\n    } else {\n      pair += \"=\" + encodeURIComponent(value);\n      pairs.push(pair);\n    }\n  }\n\n  if (pairs.length === 0) {\n    return \"\";\n  }\n\n  return \"?\" + pairs.join(\"&\");\n};\n\nRouteRecognizer.prototype.parseQueryString = function parseQueryString(queryString) {\n  var pairs = queryString.split(\"&\");\n  var queryParams = {};\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i].split(\"=\"),\n        key = decodeQueryParamPart(pair[0]),\n        keyLength = key.length,\n        isArray = false,\n        value = void 0;\n\n    if (pair.length === 1) {\n      value = \"true\";\n    } else {\n      // Handle arrays\n      if (keyLength > 2 && key.slice(keyLength - 2) === \"[]\") {\n        isArray = true;\n        key = key.slice(0, keyLength - 2);\n\n        if (!queryParams[key]) {\n          queryParams[key] = [];\n        }\n      }\n\n      value = pair[1] ? decodeQueryParamPart(pair[1]) : \"\";\n    }\n\n    if (isArray) {\n      queryParams[key].push(value);\n    } else {\n      queryParams[key] = value;\n    }\n  }\n\n  return queryParams;\n};\n\nRouteRecognizer.prototype.recognize = function recognize(path) {\n  var results;\n  var states = [this.rootState];\n  var queryParams = {};\n  var isSlashDropped = false;\n  var hashStart = path.indexOf(\"#\");\n\n  if (hashStart !== -1) {\n    path = path.substr(0, hashStart);\n  }\n\n  var queryStart = path.indexOf(\"?\");\n\n  if (queryStart !== -1) {\n    var queryString = path.substr(queryStart + 1, path.length);\n    path = path.substr(0, queryStart);\n    queryParams = this.parseQueryString(queryString);\n  }\n\n  if (path.charAt(0) !== \"/\") {\n    path = \"/\" + path;\n  }\n\n  var originalPath = path;\n\n  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n    path = normalizePath(path);\n  } else {\n    path = decodeURI(path);\n    originalPath = decodeURI(originalPath);\n  }\n\n  var pathLen = path.length;\n\n  if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n    path = path.substr(0, pathLen - 1);\n    originalPath = originalPath.substr(0, originalPath.length - 1);\n    isSlashDropped = true;\n  }\n\n  for (var i = 0; i < path.length; i++) {\n    states = recognizeChar(states, path.charCodeAt(i));\n\n    if (!states.length) {\n      break;\n    }\n  }\n\n  var solutions = [];\n\n  for (var i$1 = 0; i$1 < states.length; i$1++) {\n    if (states[i$1].handlers) {\n      solutions.push(states[i$1]);\n    }\n  }\n\n  states = sortSolutions(solutions);\n  var state = solutions[0];\n\n  if (state && state.handlers) {\n    // if a trailing slash was dropped and a star segment is the last segment\n    // specified, put the trailing slash back\n    if (isSlashDropped && state.pattern && state.pattern.slice(-5) === \"(.+)$\") {\n      originalPath = originalPath + \"/\";\n    }\n\n    results = findHandler(state, originalPath, queryParams);\n  }\n\n  return results;\n};\n\nRouteRecognizer.VERSION = \"0.3.4\"; // Set to false to opt-out of encoding and decoding path segments.\n// See https://github.com/tildeio/route-recognizer/pull/55\n\nRouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS = true;\nRouteRecognizer.Normalizer = {\n  normalizeSegment: normalizeSegment,\n  normalizePath: normalizePath,\n  encodePathSegment: encodePathSegment\n};\nRouteRecognizer.prototype.map = map;\nexport default RouteRecognizer;","map":{"version":3,"mappings":"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","names":["const","createObject","Object","create","map","undefined","path","matcher","delegate","to","target","callback","willAddRoute","add","length","Error","addChild","routes","createMap","children","Matcher","match","generateMatch","contextEntered","startingPath","let","fullPath","Target","routeArray","handler","len","i","substr","route","push","baseRoute","binding","paths","keys","slice","addRoute","nested","eachRoute","call","addRouteCallback","split","normalizeSegment","join","SEGMENT_RESERVED_CHARS","segment","indexOf","decodeURIComponent","replace","encodeURIComponent","PATH_SEGMENT_ENCODINGS","str","escapeRegex","isArray","Array","hasOwnProperty","prototype","params","key","value","eachChar","currentState","state","ch","charCodeAt","put","_","regex","generate","getParam","RouteRecognizer","ENCODE_AND_DECODE_PATH_SEGMENTS","encodePathSegment","EmptyObject","freeze","EmptyArray","segments","types","parts","names","shouldDecodes","part","flags","type","spec","char","negate","states","id","repeat","nextStates","pattern","_regex","handlers","RegExp","get","child","this","isEqualCharSpec","State","returned","isMatch","sort","a","b","astars","bstars","astatics","bstatics","adynamics","bdynamics","l","concat","queryParams","RecognizeResults","splice","originalPath","captures","currentCapture","result","isDynamic","j","name","capture","error","rootState","options","allSegments","isEmpty","parse","as","handlersFor","hasRoute","output","charAt","generateQueryString","pairs","pair","arrayPair","parseQueryString","queryString","decodeQueryParamPart","keyLength","recognize","results","isSlashDropped","hashStart","queryStart","normalizePath","decodeURI","pathLen","recognizeChar","solutions","sortSolutions","findHandler"],"sources":["/Users/naruto/Documents/Github/devgram/node_modules/route-recognizer/dist/route-recognizer/util.ts","/Users/naruto/Documents/Github/devgram/node_modules/route-recognizer/dist/route-recognizer/dsl.ts","/Users/naruto/Documents/Github/devgram/node_modules/route-recognizer/dist/route-recognizer/normalizer.ts","/Users/naruto/Documents/Github/devgram/node_modules/route-recognizer/dist/route-recognizer.ts"],"sourcesContent":["const createObject = Object.create;\nexport function createMap<T>() {\n  const map: { [key: string]: T | undefined } = createObject(null);\n  map[\"__\"] = undefined;\n  delete map[\"__\"];\n  return map;\n}\n","import { createMap } from \"./util\";\n\nexport interface Delegate {\n  contextEntered?(context: string, route: MatchDSL): void;\n  willAddRoute?(context: string | undefined, route: string): string;\n}\n\nexport type Opaque = {} | void | null | undefined;\n\nexport interface Route {\n  path: string;\n  handler: Opaque;\n  queryParams?: string[];\n}\n\nexport interface RouteRecognizer {\n  delegate: Delegate | undefined;\n  add(routes: Route[]): void;\n}\n\nexport interface MatchCallback {\n  (match: MatchDSL): void;\n}\n\nexport interface MatchDSL {\n  (path: string): ToDSL;\n  (path: string, callback: MatchCallback): void;\n}\n\nexport interface ToDSL {\n  to(name: string, callback?: MatchCallback): void;\n}\n\nclass Target implements ToDSL {\n  path: string;\n  matcher: Matcher;\n  delegate: Delegate | undefined;\n\n  constructor(path: string, matcher: Matcher, delegate: Delegate | undefined) {\n    this.path = path;\n    this.matcher = matcher;\n    this.delegate = delegate;\n  }\n\n  to(target: string, callback: MatchCallback) {\n    let delegate = this.delegate;\n\n    if (delegate && delegate.willAddRoute) {\n      target = delegate.willAddRoute(this.matcher.target, target);\n    }\n\n    this.matcher.add(this.path, target);\n\n    if (callback) {\n      if (callback.length === 0) { throw new Error(\"You must have an argument in the function passed to `to`\"); }\n      this.matcher.addChild(this.path, target, callback, this.delegate);\n    }\n  }\n}\n\nexport class Matcher {\n  routes: {\n    [path: string]: string | undefined;\n  };\n  children: {\n    [path: string]: Matcher | undefined;\n  };\n  target: string | undefined;\n\n  constructor(target?: string) {\n    this.routes = createMap<string>();\n    this.children = createMap<Matcher>();\n    this.target = target;\n  }\n\n  add(path: string, target: string) {\n    this.routes[path] = target;\n  }\n\n  addChild(path: string, target: string, callback: MatchCallback, delegate: Delegate | undefined) {\n    let matcher = new Matcher(target);\n    this.children[path] = matcher;\n\n    let match = generateMatch(path, matcher, delegate);\n\n    if (delegate && delegate.contextEntered) {\n      delegate.contextEntered(target, match);\n    }\n\n    callback(match);\n  }\n}\n\nfunction generateMatch(startingPath: string, matcher: Matcher, delegate: Delegate | undefined): MatchDSL {\n  function match(path: string): ToDSL;\n  function match(path: string, callback: MatchCallback): void;\n  function match(path: string, callback?: MatchCallback): ToDSL | void {\n    let fullPath = startingPath + path;\n    if (callback) {\n      callback(generateMatch(fullPath, matcher, delegate));\n    } else {\n      return new Target(fullPath, matcher, delegate);\n    }\n  };\n  return match;\n}\n\nfunction addRoute(routeArray: Route[], path: string, handler: any) {\n  let len = 0;\n  for (let i = 0; i < routeArray.length; i++) {\n    len += routeArray[i].path.length;\n  }\n\n  path = path.substr(len);\n  let route = { path: path, handler: handler };\n  routeArray.push(route);\n}\n\nfunction eachRoute<T>(baseRoute: Route[], matcher: Matcher, callback: (this: T, routes: Route[]) => void, binding: T) {\n  let routes = matcher.routes;\n  let paths = Object.keys(routes);\n  for (let i = 0; i < paths.length; i++) {\n    let path = paths[i];\n    let routeArray = baseRoute.slice();\n    addRoute(routeArray, path, routes[path]);\n    let nested = matcher.children[path];\n    if (nested) {\n      eachRoute(routeArray, nested, callback, binding);\n    } else {\n      callback.call(binding, routeArray);\n    }\n  }\n}\n\nexport default function <T extends RouteRecognizer>(this: T, callback: MatchCallback, addRouteCallback?: (routeRecognizer: T, routes: Route[]) => void) {\n  let matcher = new Matcher();\n\n  callback(generateMatch(\"\", matcher, this.delegate));\n\n  eachRoute([], matcher, function(routes: Route[]) {\n    if (addRouteCallback) { addRouteCallback(this, routes); }\n    else { this.add(routes); }\n  }, this);\n}\n","// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n// chars are \"/\" and \"%\".\n// Safe to call multiple times on the same path.\nexport function normalizePath(path: string): string {\n  return path.split(\"/\")\n             .map(normalizeSegment)\n             .join(\"/\");\n}\n\n// We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n// form when normalizing paths, so replace them with their encoded form after\n// decoding the rest of the path\nconst SEGMENT_RESERVED_CHARS = /%|\\//g;\nexport function normalizeSegment(segment: string) {\n  if (segment.length < 3 || segment.indexOf(\"%\") === -1) return segment;\n  return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n}\n\n// We do not want to encode these characters when generating dynamic path segments\n// See https://tools.ietf.org/html/rfc3986#section-3.3\n// sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n// others allowed by RFC 3986: \":\", \"@\"\n//\n// First encode the entire path segment, then decode any of the encoded special chars.\n//\n// The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n// so the possible encoded chars are:\n// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\nconst PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;\n\nexport function encodePathSegment(str: string) {\n  return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n}\n","import { createMap } from \"./route-recognizer/util\";\nimport map, { Delegate, Route, Opaque, MatchCallback } from \"./route-recognizer/dsl\";\nimport { normalizePath, normalizeSegment, encodePathSegment } from \"./route-recognizer/normalizer\";\nexport { Delegate, MatchCallback } from './route-recognizer/dsl';\n\nconst enum CHARS {\n  ANY = -1,\n  STAR = 42,\n  SLASH = 47,\n  COLON = 58\n}\n\nconst escapeRegex = /(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)/g;\n\nconst isArray = Array.isArray;\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction getParam(params: Params | null | undefined, key: string): string {\n  if (typeof params !== \"object\" || params === null) {\n    throw new Error(\"You must pass an object as the second argument to `generate`.\");\n  }\n\n  if (!hasOwnProperty.call(params, key)) {\n    throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n  }\n\n  let value = params[key];\n  let str = typeof value === \"string\" ? value : \"\" + value;\n  if (str.length === 0) {\n    throw new Error(\"You must provide a param `\" + key + \"`.\");\n  }\n  return str;\n}\n\nconst enum SegmentType {\n  Static  = 0,\n  Dynamic = 1,\n  Star    = 2,\n  Epsilon = 4\n}\n\nconst enum SegmentFlags {\n  Static  = 2 << SegmentType.Static,\n  Dynamic = 2 << SegmentType.Dynamic,\n  Star    = 2 << SegmentType.Star,\n  Epsilon = 2 << SegmentType.Epsilon,\n  Named = Dynamic | Star,\n  Decoded = Dynamic,\n  Counted = Static | Dynamic | Star\n}\n\nconst eachChar: ((segment: Segment, currentState: State) => State)[] = [];\neachChar[SegmentType.Static] = function (segment: Segment, currentState: State) {\n  let state = currentState;\n  let value = segment.value;\n  for (let i = 0; i < value.length; i++) {\n    let ch = value.charCodeAt(i);\n    state = state.put(ch, false, false);\n  }\n  return state;\n};\neachChar[SegmentType.Dynamic] = function (_: Segment, currentState: State) {\n  return currentState.put(CHARS.SLASH, true, true);\n};\neachChar[SegmentType.Star] = function (_: Segment, currentState: State) {\n  return currentState.put(CHARS.ANY, false, true);\n};\neachChar[SegmentType.Epsilon] = function (_: Segment, currentState: State) {\n  return currentState;\n};\n\nconst regex: ((segment: Segment) => string)[] = [];\nregex[SegmentType.Static] = function (segment: Segment) {\n  return segment.value.replace(escapeRegex, \"\\\\$1\");\n};\nregex[SegmentType.Dynamic] = function () {\n  return \"([^/]+)\";\n};\nregex[SegmentType.Star] = function () {\n  return \"(.+)\";\n};\nregex[SegmentType.Epsilon] = function () {\n  return \"\";\n};\n\nconst generate: ((segment: Segment, params?: Params | null) => string)[] = [];\ngenerate[SegmentType.Static] = function (segment: Segment) {\n  return segment.value;\n};\ngenerate[SegmentType.Dynamic] = function (segment: Segment, params?: Params) {\n  let value = getParam(params, segment.value);\n  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n    return encodePathSegment(value);\n  } else {\n    return value;\n  }\n};\ngenerate[SegmentType.Star] = function (segment: Segment, params?: Params) {\n  return getParam(params, segment.value);\n};\ngenerate[SegmentType.Epsilon] = function () {\n  return \"\";\n};\n\n// A Segment represents a segment in the original route description.\n// Each Segment type provides an `eachChar` and `regex` method.\n//\n// The `eachChar` method invokes the callback with one or more character\n// specifications. A character specification consumes one or more input\n// characters.\n//\n// The `regex` method returns a regex fragment for the segment. If the\n// segment is a dynamic of star segment, the regex fragment also includes\n// a capture.\n//\n// A character specification contains:\n//\n// * `validChars`: a String with a list of all valid characters, or\n// * `invalidChars`: a String with a list of all invalid characters\n// * `repeat`: true if the character specification can repeat\ninterface Segment {\n  type: SegmentType;\n  value: string;\n}\n\nexport interface Params {\n  [key: string]: Opaque;\n  [key: number]: Opaque;\n  queryParams?: QueryParams | null;\n}\n\ninterface PopulatedParsedHandlers {\n  names: string[];\n  shouldDecodes: any[];\n}\n\nconst EmptyObject = Object.freeze({});\ntype EmptyObject = Readonly<{}>\n\nconst EmptyArray = Object.freeze([]) as ReadonlyArray<any>;\ntype EmptyArray = ReadonlyArray<any>;\n\ninterface EmptyParsedHandlers {\n  names: EmptyArray;\n  shouldDecodes: EmptyArray;\n}\n\ntype ParsedHandler = PopulatedParsedHandlers | EmptyParsedHandlers;\n\n// The `names` will be populated with the paramter name for each dynamic/star\n// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n// segment, indicating whether it should be decoded during recognition.\nfunction parse(segments: Segment[], route: string, types: [number, number, number]) {\n  // normalize route as not starting with a \"/\". Recognition will\n  // also normalize.\n  if (route.length > 0 && route.charCodeAt(0) === CHARS.SLASH) { route = route.substr(1); }\n\n  let parts = route.split(\"/\");\n  let names: void | string[] = undefined;\n  let shouldDecodes: void | any[] = undefined;\n\n  for (let i = 0; i < parts.length; i++) {\n    let part = parts[i];\n    let flags: SegmentFlags = 0;\n    let type: SegmentType = 0;\n\n    if (part === \"\") {\n      type = SegmentType.Epsilon;\n    } else if (part.charCodeAt(0) === CHARS.COLON) {\n      type = SegmentType.Dynamic;\n    } else if (part.charCodeAt(0) === CHARS.STAR) {\n      type = SegmentType.Star;\n    }  else {\n      type = SegmentType.Static;\n    }\n\n    flags = 2 << type;\n\n    if (flags & SegmentFlags.Named) {\n      part = part.slice(1);\n      names = names || [];\n      names.push(part);\n\n      shouldDecodes = shouldDecodes || [];\n      shouldDecodes.push((flags & SegmentFlags.Decoded) !== 0);\n    }\n\n    if (flags & SegmentFlags.Counted) {\n      types[type]++;\n    }\n\n    segments.push({\n      type,\n      value: normalizeSegment(part)\n    });\n  }\n\n  return {\n    names: names || EmptyArray,\n    shouldDecodes: shouldDecodes || EmptyArray,\n  } as ParsedHandler;\n}\n\nfunction isEqualCharSpec(spec: CharSpec, char: number, negate: boolean) {\n  return spec.char === char && spec.negate === negate;\n}\n\ninterface EmptyHandler {\n  handler: Opaque;\n  names: EmptyArray;\n  shouldDecodes: EmptyArray;\n}\n\ninterface PopulatedHandler {\n  handler: Opaque;\n  names: string [];\n  shouldDecodes: boolean[];\n}\n\ntype Handler = EmptyHandler | PopulatedHandler;\n\n// A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\nclass State implements CharSpec {\n  states: State[];\n  id: number;\n  negate: boolean;\n  char: number;\n  nextStates: number[] | number | null;\n  pattern: string;\n  _regex: RegExp | undefined;\n  handlers: Handler[] | undefined;\n  types: [number, number, number] | undefined;\n\n  constructor(states: State[], id: number, char: number, negate: boolean, repeat: boolean) {\n    this.states = states;\n    this.id = id;\n    this.char = char;\n    this.negate = negate;\n    this.nextStates = repeat ? id : null;\n    this.pattern = \"\";\n    this._regex = undefined;\n    this.handlers = undefined;\n    this.types = undefined;\n  }\n\n  regex(): RegExp {\n    if (!this._regex) {\n      this._regex = new RegExp(this.pattern);\n    }\n    return this._regex;\n  }\n\n  get(char: number, negate: boolean): State | void {\n    let nextStates = this.nextStates;\n    if (nextStates === null) return;\n    if (isArray(nextStates)) {\n      for (let i = 0; i < nextStates.length; i++) {\n        let child = this.states[nextStates[i]];\n        if (isEqualCharSpec(child, char, negate)) {\n          return child;\n        }\n      }\n    } else {\n      let child = this.states[nextStates];\n      if (isEqualCharSpec(child, char, negate)) {\n        return child;\n      }\n    }\n  }\n\n  put(char: number, negate: boolean, repeat: boolean) {\n    let state: State | void;\n\n    // If the character specification already exists in a child of the current\n    // state, just return that state.\n    if (state = this.get(char, negate)) { return state; }\n\n    // Make a new state for the character spec\n    let states = this.states;\n    state = new State(states, states.length, char, negate, repeat);\n    states[states.length] = state;\n\n    // Insert the new state as a child of the current state\n    if (this.nextStates == null) {\n      this.nextStates = state.id;\n    } else if (isArray(this.nextStates)) {\n      this.nextStates.push(state.id);\n    } else {\n      this.nextStates = [this.nextStates, state.id];\n    }\n\n    // Return the new state\n    return state;\n  }\n\n  // Find a list of child states matching the next character\n  match(ch: number): State[] {\n    let nextStates = this.nextStates;\n    if (!nextStates) return [];\n\n    let returned: State[] = [];\n    if (isArray(nextStates)) {\n      for (let i = 0; i < nextStates.length; i++) {\n        let child = this.states[nextStates[i]];\n\n        if (isMatch(child, ch)) {\n          returned.push(child);\n        }\n      }\n    } else {\n      let child = this.states[nextStates];\n      if (isMatch(child, ch)) {\n        returned.push(child);\n      }\n    }\n    return returned;\n  }\n}\n\nfunction isMatch(spec: CharSpec, char: number) {\n  return spec.negate ? spec.char !== char && spec.char !== CHARS.ANY : spec.char === char || spec.char === CHARS.ANY;\n}\n\n// This is a somewhat naive strategy, but should work in a lot of cases\n// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n//\n// This strategy generally prefers more static and less dynamic matching.\n// Specifically, it\n//\n//  * prefers fewer stars to more, then\n//  * prefers using stars for less of the match to more, then\n//  * prefers fewer dynamic segments to more, then\n//  * prefers more static segments to more\nfunction sortSolutions(states: State[]) {\n  return states.sort(function(a, b) {\n    let [ astatics, adynamics, astars ] = a.types || [0, 0, 0];\n    let [ bstatics, bdynamics, bstars ] = b.types || [0, 0, 0];\n    if (astars !== bstars) { return astars - bstars; }\n\n    if (astars) {\n      if (astatics !== bstatics) { return bstatics - astatics; }\n      if (adynamics !== bdynamics) { return bdynamics - adynamics; }\n    }\n\n    if (adynamics !== bdynamics) { return adynamics - bdynamics; }\n    if (astatics !== bstatics) { return bstatics - astatics; }\n\n    return 0;\n  });\n}\n\nfunction recognizeChar(states: State[], ch: number) {\n  let nextStates: State[] = [];\n\n  for (let i = 0, l = states.length; i < l; i++) {\n    let state = states[i];\n\n    nextStates = nextStates.concat(state.match(ch));\n  }\n\n  return nextStates;\n}\n\n\nexport interface QueryParams {\n  [param: string]: any[] | any | null | undefined;\n}\n\nexport interface Result {\n  handler: Opaque;\n  params: Params;\n  isDynamic: boolean;\n}\n\nexport interface Results extends ArrayLike<Result | undefined> {\n  queryParams: QueryParams;\n  slice(start?: number, end?: number): Result[];\n  splice(start: number, deleteCount: number, ...items: Result[]): Result[];\n  push(...results: Result[]): number;\n}\n\nclass RecognizeResults implements Results {\n  queryParams: QueryParams;\n  length = 0;\n  [index: number]: Result | undefined;\n  splice: (start: number, deleteCount: number, ...items: Result[]) => Result[];\n  slice: (start?: number, end?: number) => Result[];\n  push: (...results: Result[]) => number;\n\n  constructor(queryParams?: QueryParams) {\n    this.queryParams = queryParams || {};\n  }\n};\n\nRecognizeResults.prototype.splice = Array.prototype.splice;\nRecognizeResults.prototype.slice =  Array.prototype.slice;\nRecognizeResults.prototype.push = Array.prototype.push;\n\nfunction findHandler(state: State, originalPath: string, queryParams: QueryParams): Results {\n  let handlers = state.handlers;\n  let regex: RegExp = state.regex();\n  if (!regex || !handlers) throw new Error(\"state not initialized\");\n  let captures: RegExpMatchArray | null = originalPath.match(regex);\n  let currentCapture = 1;\n  let result = new RecognizeResults(queryParams);\n\n  result.length = handlers.length;\n\n  for (let i = 0; i < handlers.length; i++) {\n    let handler = handlers[i];\n    let names = handler.names;\n    let shouldDecodes = handler.shouldDecodes;\n    let params: EmptyObject | Params = EmptyObject;\n\n    let isDynamic = false;\n\n    if (names !== EmptyArray && shouldDecodes !== EmptyArray) {\n      for (let j = 0; j < names.length; j++) {\n        isDynamic = true;\n        let name = names[j];\n        let capture = captures && captures[currentCapture++];\n\n        if (params === EmptyObject) {\n          params = {};\n        }\n\n        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {\n          (<Params>params)[name] = capture && decodeURIComponent(capture);\n        } else {\n          (<Params>params)[name] = capture;\n        }\n      }\n    }\n\n    result[i] = {\n      handler: handler.handler,\n      params,\n      isDynamic\n    };\n  }\n\n  return result;\n}\n\nfunction decodeQueryParamPart(part: string): string {\n  // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n  part = part.replace(/\\+/gm, \"%20\");\n  let result;\n  try {\n    result = decodeURIComponent(part);\n  } catch (error) {result = \"\"; }\n  return result;\n}\n\ninterface NamedRoute {\n  segments: Segment[];\n  handlers: Handler[];\n}\n\nclass RouteRecognizer {\n  private states: State[];\n  private rootState: State;\n  private names: {\n    [name: string]: NamedRoute | undefined;\n  } = createMap<NamedRoute>();\n  map: (context: MatchCallback, addCallback?: (router: this, routes: Route[]) => void) => void;\n  delegate: Delegate | undefined;\n\n  constructor() {\n    let states: State[] = [];\n    let state = new State(states, 0, CHARS.ANY, true, false);\n    states[0] = state;\n    this.states = states;\n    this.rootState = state;\n  }\n\n  static VERSION = \"0.3.4\";\n  // Set to false to opt-out of encoding and decoding path segments.\n  // See https://github.com/tildeio/route-recognizer/pull/55\n  static ENCODE_AND_DECODE_PATH_SEGMENTS = true;\n  static Normalizer = {\n    normalizeSegment, normalizePath, encodePathSegment\n  };\n\n  add(routes: Route[], options?: { as: string }) {\n    let currentState = this.rootState;\n    let pattern = \"^\";\n    let types: [number, number, number] = [0, 0, 0];\n    let handlers: Handler[] = new Array(routes.length);\n    let allSegments: Segment[] = [];\n\n    let isEmpty = true;\n    let j = 0;\n    for (let i = 0; i < routes.length; i++) {\n      let route = routes[i];\n      let { names, shouldDecodes } = parse(allSegments, route.path, types);\n\n      // preserve j so it points to the start of newly added segments\n      for (; j < allSegments.length; j++) {\n        let segment = allSegments[j];\n\n        if (segment.type === SegmentType.Epsilon) { continue; }\n\n        isEmpty = false;\n\n        // Add a \"/\" for the new segment\n        currentState = currentState.put(CHARS.SLASH, false, false);\n        pattern += \"/\";\n\n        // Add a representation of the segment to the NFA and regex\n        currentState = eachChar[segment.type](segment, currentState);\n        pattern += regex[segment.type](segment);\n      }\n      handlers[i] = {\n        handler: route.handler,\n        names,\n        shouldDecodes\n      };\n    }\n\n    if (isEmpty) {\n        currentState = currentState.put(CHARS.SLASH, false, false);\n      pattern += \"/\";\n    }\n\n    currentState.handlers = handlers;\n    currentState.pattern = pattern + \"$\";\n    currentState.types = types;\n\n    let name: string | undefined;\n    if (typeof options === \"object\" && options !== null && options.as) {\n      name = options.as;\n    }\n\n    if (name) {\n      // if (this.names[name]) {\n      //   throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n      // }\n\n      this.names[name] = {\n        segments: allSegments,\n        handlers\n      };\n    }\n  }\n\n  handlersFor(name: string) {\n    let route = this.names[name];\n\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    let result = new Array(route.handlers.length);\n\n    for (let i = 0; i < route.handlers.length; i++) {\n      let handler = route.handlers[i];\n      result[i] = handler;\n    }\n\n    return result;\n  }\n\n  hasRoute(name: string) {\n    return !!this.names[name];\n  }\n\n  generate(name: string, params?: Params | null) {\n    let route = this.names[name];\n    let output = \"\";\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    let segments: Segment[] = route.segments;\n\n    for (let i = 0; i < segments.length; i++) {\n      let segment: Segment = segments[i];\n\n      if (segment.type === SegmentType.Epsilon) {\n        continue;\n      }\n\n      output += \"/\";\n      output += generate[segment.type](segment, params);\n    }\n\n    if (output.charAt(0) !== \"/\") { output = \"/\" + output; }\n\n    if (params && params.queryParams) {\n      output += this.generateQueryString(params.queryParams);\n    }\n\n    return output;\n  }\n\n  generateQueryString(params: QueryParams) {\n    let pairs: string[] = [];\n    let keys: string[] = Object.keys(params);\n    keys.sort();\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let value = params[key];\n      if (value == null) {\n        continue;\n      }\n      let pair = encodeURIComponent(key);\n      if (isArray(value)) {\n        for (let j = 0; j < value.length; j++) {\n          let arrayPair = key + \"[]\" + \"=\" + encodeURIComponent(value[j]);\n          pairs.push(arrayPair);\n        }\n      } else {\n        pair += \"=\" + encodeURIComponent(value);\n        pairs.push(pair);\n      }\n    }\n\n    if (pairs.length === 0) { return \"\"; }\n\n    return \"?\" + pairs.join(\"&\");\n  }\n\n  parseQueryString(queryString: string): QueryParams {\n    let pairs = queryString.split(\"&\");\n    let queryParams: QueryParams = {};\n    for (let i = 0; i < pairs.length; i++) {\n      let pair      = pairs[i].split(\"=\"),\n          key       = decodeQueryParamPart(pair[0]),\n          keyLength = key.length,\n          isArray = false,\n          value;\n      if (pair.length === 1) {\n        value = \"true\";\n      } else {\n        // Handle arrays\n        if (keyLength > 2 && key.slice(keyLength - 2) === \"[]\") {\n          isArray = true;\n          key = key.slice(0, keyLength - 2);\n          if (!queryParams[key]) {\n            queryParams[key] = [];\n          }\n        }\n        value = pair[1] ? decodeQueryParamPart(pair[1]) : \"\";\n      }\n      if (isArray) {\n        (<string[]>queryParams[key]).push(value);\n      } else {\n        queryParams[key] = value;\n      }\n    }\n    return queryParams;\n  }\n\n  recognize(path: string): Results | undefined {\n    let results: Results | undefined;\n    let states: State[] = [ this.rootState ];\n    let queryParams = {};\n    let isSlashDropped = false;\n    let hashStart = path.indexOf(\"#\");\n    if (hashStart !== -1) {\n      path = path.substr(0, hashStart);\n    }\n\n    let queryStart = path.indexOf(\"?\");\n    if (queryStart !== -1) {\n      let queryString = path.substr(queryStart + 1, path.length);\n      path = path.substr(0, queryStart);\n      queryParams = this.parseQueryString(queryString);\n    }\n\n    if (path.charAt(0) !== \"/\") { path = \"/\" + path; }\n    let originalPath = path;\n\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n      path = normalizePath(path);\n    } else {\n      path = decodeURI(path);\n      originalPath = decodeURI(originalPath);\n    }\n\n    let pathLen = path.length;\n    if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n      path = path.substr(0, pathLen - 1);\n      originalPath = originalPath.substr(0, originalPath.length - 1);\n      isSlashDropped = true;\n    }\n\n    for (let i = 0; i < path.length; i++) {\n      states = recognizeChar(states, path.charCodeAt(i));\n      if (!states.length) { break; }\n    }\n\n    let solutions: State[] = [];\n    for (let i = 0; i < states.length; i++) {\n      if (states[i].handlers) { solutions.push(states[i]); }\n    }\n\n    states = sortSolutions(solutions);\n\n    let state = solutions[0];\n\n    if (state && state.handlers) {\n      // if a trailing slash was dropped and a star segment is the last segment\n      // specified, put the trailing slash back\n      if (isSlashDropped && state.pattern && state.pattern.slice(-5) === \"(.+)$\") {\n        originalPath = originalPath + \"/\";\n      }\n      results = findHandler(state, originalPath, queryParams);\n    }\n\n    return results;\n  }\n}\n\nRouteRecognizer.prototype.map = map;\n\nexport default RouteRecognizer;\n\ninterface CharSpec {\n  negate: boolean;\n  char: number;\n}\n"]},"metadata":{},"sourceType":"module"}