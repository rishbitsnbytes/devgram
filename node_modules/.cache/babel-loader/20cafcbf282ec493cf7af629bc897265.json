{"ast":null,"code":"import { Server, Model, RestSerializer } from \"miragejs\";\nimport { posts } from \"./backend/db/posts\";\nimport { users } from \"./backend/db/users\";\nimport { loginHandler, signupHandler } from \"./backend/controllers/AuthController\";\nimport { createPostHandler, getAllpostsHandler, getPostHandler, deletePostHandler, editPostHandler, likePostHandler, dislikePostHandler, getAllUserPostsHandler } from \"./backend/controllers/PostController\";\nimport { getPostCommentsHandler, addPostCommentHandler, editPostCommentHandler, deletePostCommentHandler, upvotePostCommentHandler, downvotePostCommentHandler } from \"./backend/controllers/CommentsController\";\nimport { followUserHandler, getAllUsersHandler, getUserHandler, getBookmarkPostsHandler, bookmarkPostHandler, removePostFromBookmarkHandler, unfollowUserHandler, editUserHandler } from \"./backend/controllers/UserController\";\nexport function makeServer() {\n  let {\n    environment = \"development\"\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new Server({\n    serializers: {\n      application: RestSerializer\n    },\n    environment,\n    // TODO: Use Relationships to have named relational Data\n    models: {\n      post: Model,\n      user: Model\n    },\n\n    // Runs on the start of the server\n    seeds(server) {\n      server.logging = false;\n      users.forEach(item => server.create(\"user\", { ...item,\n        followers: [],\n        following: [],\n        bookmarks: []\n      }));\n      posts.forEach(item => server.create(\"post\", { ...item\n      }));\n    },\n\n    routes() {\n      this.namespace = \"api\"; // auth routes (public)\n\n      this.post(\"/auth/signup\", signupHandler.bind(this));\n      this.post(\"/auth/login\", loginHandler.bind(this)); // post routes (public)\n\n      this.get(\"/posts\", getAllpostsHandler.bind(this));\n      this.get(\"/posts/:postId\", getPostHandler.bind(this));\n      this.get(\"/posts/user/:username\", getAllUserPostsHandler.bind(this)); // post routes (private)\n\n      this.post(\"/posts\", createPostHandler.bind(this));\n      this.delete(\"/posts/:postId\", deletePostHandler.bind(this));\n      this.post(\"/posts/edit/:postId\", editPostHandler.bind(this));\n      this.post(\"/posts/like/:postId\", likePostHandler.bind(this));\n      this.post(\"/posts/dislike/:postId\", dislikePostHandler.bind(this)); //post comments routes (public)\n\n      this.get(\"/comments/:postId\", getPostCommentsHandler.bind(this)); //post comments routes (private)\n\n      this.post(\"/comments/add/:postId\", addPostCommentHandler.bind(this));\n      this.post(\"/comments/edit/:postId/:commentId\", editPostCommentHandler.bind(this));\n      this.post(\"/comments/delete/:postId/:commentId\", deletePostCommentHandler.bind(this));\n      this.post(\"/comments/upvote/:postId/:commentId\", upvotePostCommentHandler.bind(this));\n      this.post(\"/comments/downvote/:postId/:commentId\", downvotePostCommentHandler.bind(this)); // user routes (public)\n\n      this.get(\"/users\", getAllUsersHandler.bind(this));\n      this.get(\"/users/:userId\", getUserHandler.bind(this)); // user routes (private)\n\n      this.post(\"users/edit\", editUserHandler.bind(this));\n      this.get(\"/users/bookmark\", getBookmarkPostsHandler.bind(this));\n      this.post(\"/users/bookmark/:postId/\", bookmarkPostHandler.bind(this));\n      this.post(\"/users/remove-bookmark/:postId/\", removePostFromBookmarkHandler.bind(this));\n      this.post(\"/users/follow/:followUserId/\", followUserHandler.bind(this));\n      this.post(\"/users/unfollow/:followUserId/\", unfollowUserHandler.bind(this));\n    }\n\n  });\n}","map":{"version":3,"names":["Server","Model","RestSerializer","posts","users","loginHandler","signupHandler","createPostHandler","getAllpostsHandler","getPostHandler","deletePostHandler","editPostHandler","likePostHandler","dislikePostHandler","getAllUserPostsHandler","getPostCommentsHandler","addPostCommentHandler","editPostCommentHandler","deletePostCommentHandler","upvotePostCommentHandler","downvotePostCommentHandler","followUserHandler","getAllUsersHandler","getUserHandler","getBookmarkPostsHandler","bookmarkPostHandler","removePostFromBookmarkHandler","unfollowUserHandler","editUserHandler","makeServer","environment","serializers","application","models","post","user","seeds","server","logging","forEach","item","create","followers","following","bookmarks","routes","namespace","bind","get","delete"],"sources":["/Users/naruto/Documents/Github/devgram/src/server.js"],"sourcesContent":["import { Server, Model, RestSerializer } from \"miragejs\";\r\nimport { posts } from \"./backend/db/posts\";\r\nimport { users } from \"./backend/db/users\";\r\nimport {\r\n  loginHandler,\r\n  signupHandler,\r\n} from \"./backend/controllers/AuthController\";\r\nimport {\r\n  createPostHandler,\r\n  getAllpostsHandler,\r\n  getPostHandler,\r\n  deletePostHandler,\r\n  editPostHandler,\r\n  likePostHandler,\r\n  dislikePostHandler,\r\n  getAllUserPostsHandler,\r\n} from \"./backend/controllers/PostController\";\r\nimport {\r\n  getPostCommentsHandler,\r\n  addPostCommentHandler,\r\n  editPostCommentHandler,\r\n  deletePostCommentHandler,\r\n  upvotePostCommentHandler,\r\n  downvotePostCommentHandler,\r\n} from \"./backend/controllers/CommentsController\";\r\nimport {\r\n  followUserHandler,\r\n  getAllUsersHandler,\r\n  getUserHandler,\r\n  getBookmarkPostsHandler,\r\n  bookmarkPostHandler,\r\n  removePostFromBookmarkHandler,\r\n  unfollowUserHandler,\r\n  editUserHandler,\r\n} from \"./backend/controllers/UserController\";\r\n\r\nexport function makeServer({ environment = \"development\" } = {}) {\r\n  return new Server({\r\n    serializers: {\r\n      application: RestSerializer,\r\n    },\r\n    environment,\r\n    // TODO: Use Relationships to have named relational Data\r\n    models: {\r\n      post: Model,\r\n      user: Model,\r\n    },\r\n\r\n    // Runs on the start of the server\r\n    seeds(server) {\r\n      server.logging = false;\r\n      users.forEach((item) =>\r\n        server.create(\"user\", {\r\n          ...item,\r\n          followers: [],\r\n          following: [],\r\n          bookmarks: [],\r\n        })\r\n      );\r\n      posts.forEach((item) => server.create(\"post\", { ...item }));\r\n    },\r\n\r\n    routes() {\r\n      this.namespace = \"api\";\r\n      // auth routes (public)\r\n      this.post(\"/auth/signup\", signupHandler.bind(this));\r\n      this.post(\"/auth/login\", loginHandler.bind(this));\r\n\r\n      // post routes (public)\r\n      this.get(\"/posts\", getAllpostsHandler.bind(this));\r\n      this.get(\"/posts/:postId\", getPostHandler.bind(this));\r\n      this.get(\"/posts/user/:username\", getAllUserPostsHandler.bind(this));\r\n\r\n      // post routes (private)\r\n      this.post(\"/posts\", createPostHandler.bind(this));\r\n      this.delete(\"/posts/:postId\", deletePostHandler.bind(this));\r\n      this.post(\"/posts/edit/:postId\", editPostHandler.bind(this));\r\n      this.post(\"/posts/like/:postId\", likePostHandler.bind(this));\r\n      this.post(\"/posts/dislike/:postId\", dislikePostHandler.bind(this));\r\n\r\n      //post comments routes (public)\r\n      this.get(\"/comments/:postId\", getPostCommentsHandler.bind(this));\r\n\r\n      //post comments routes (private)\r\n      this.post(\"/comments/add/:postId\", addPostCommentHandler.bind(this));\r\n      this.post(\r\n        \"/comments/edit/:postId/:commentId\",\r\n        editPostCommentHandler.bind(this)\r\n      );\r\n      this.post(\r\n        \"/comments/delete/:postId/:commentId\",\r\n        deletePostCommentHandler.bind(this)\r\n      );\r\n      this.post(\r\n        \"/comments/upvote/:postId/:commentId\",\r\n        upvotePostCommentHandler.bind(this)\r\n      );\r\n      this.post(\r\n        \"/comments/downvote/:postId/:commentId\",\r\n        downvotePostCommentHandler.bind(this)\r\n      );\r\n      // user routes (public)\r\n      this.get(\"/users\", getAllUsersHandler.bind(this));\r\n      this.get(\"/users/:userId\", getUserHandler.bind(this));\r\n\r\n      // user routes (private)\r\n      this.post(\"users/edit\", editUserHandler.bind(this));\r\n      this.get(\"/users/bookmark\", getBookmarkPostsHandler.bind(this));\r\n      this.post(\"/users/bookmark/:postId/\", bookmarkPostHandler.bind(this));\r\n      this.post(\r\n        \"/users/remove-bookmark/:postId/\",\r\n        removePostFromBookmarkHandler.bind(this)\r\n      );\r\n      this.post(\"/users/follow/:followUserId/\", followUserHandler.bind(this));\r\n      this.post(\r\n        \"/users/unfollow/:followUserId/\",\r\n        unfollowUserHandler.bind(this)\r\n      );\r\n    },\r\n  });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}