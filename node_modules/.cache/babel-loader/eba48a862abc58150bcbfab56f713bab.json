{"ast":null,"code":"import { v4 as uuid } from \"uuid\";\nimport { Response } from \"miragejs\";\nimport { formatDate } from \"../utils/authUtils\";\n\nconst sign = require(\"jwt-encode\");\n/**\r\n * All the routes related to Auth are present here.\r\n * These are Publicly accessible routes.\r\n * */\n\n/**\r\n * This handler handles user signups.\r\n * send POST Request at /api/auth/signup\r\n * body contains {firstName, lastName, username, password}\r\n * */\n\n\nexport const signupHandler = function (schema, request) {\n  const {\n    username,\n    password,\n    ...rest\n  } = JSON.parse(request.requestBody);\n\n  try {\n    // check if username already exists\n    const foundUser = schema.users.findBy({\n      username: username\n    });\n\n    if (foundUser) {\n      return new Response(422, {}, {\n        errors: [\"Unprocessable Entity. Username Already Exists.\"]\n      });\n    }\n\n    const _id = uuid();\n\n    const newUser = {\n      _id,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      username,\n      password,\n      ...rest,\n      followers: [],\n      following: [],\n      bookmarks: [],\n      bio: \"\",\n      profileImage: \"https://res.cloudinary.com/dylkclyom/image/upload/v1652861304/default_profile_400x400_kl4nw3.png\",\n      website: \"\"\n    };\n    const createdUser = schema.users.create(newUser);\n    const encodedToken = sign({\n      _id,\n      username\n    }, process.env.REACT_APP_JWT_SECRET);\n    return new Response(201, {}, {\n      createdUser,\n      encodedToken\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles user login.\r\n * send POST Request at /api/auth/login\r\n * body contains {username, password}\r\n * */\n\nexport const loginHandler = function (schema, request) {\n  const {\n    username,\n    password\n  } = JSON.parse(request.requestBody);\n\n  try {\n    const foundUser = schema.users.findBy({\n      username: username\n    });\n\n    if (!foundUser) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    if (password === foundUser.password) {\n      const encodedToken = sign({\n        _id: foundUser._id,\n        username\n      }, process.env.REACT_APP_JWT_SECRET);\n      return new Response(200, {}, {\n        foundUser,\n        encodedToken\n      });\n    }\n\n    return new Response(401, {}, {\n      errors: [\"The credentials you entered are invalid. Unauthorized access error.\"]\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"names":["v4","uuid","Response","formatDate","sign","require","signupHandler","schema","request","username","password","rest","JSON","parse","requestBody","foundUser","users","findBy","errors","_id","newUser","createdAt","updatedAt","followers","following","bookmarks","bio","profileImage","website","createdUser","create","encodedToken","process","env","REACT_APP_JWT_SECRET","error","loginHandler"],"sources":["/Users/naruto/Documents/Github/devgram/src/backend/controllers/AuthController.js"],"sourcesContent":["import { v4 as uuid } from \"uuid\";\r\nimport { Response } from \"miragejs\";\r\nimport { formatDate } from \"../utils/authUtils\";\r\nconst sign = require(\"jwt-encode\");\r\n\r\n/**\r\n * All the routes related to Auth are present here.\r\n * These are Publicly accessible routes.\r\n * */\r\n\r\n/**\r\n * This handler handles user signups.\r\n * send POST Request at /api/auth/signup\r\n * body contains {firstName, lastName, username, password}\r\n * */\r\n\r\nexport const signupHandler = function (schema, request) {\r\n  const { username, password, ...rest } = JSON.parse(request.requestBody);\r\n  try {\r\n    // check if username already exists\r\n    const foundUser = schema.users.findBy({ username: username });\r\n    if (foundUser) {\r\n      return new Response(\r\n        422,\r\n        {},\r\n        {\r\n          errors: [\"Unprocessable Entity. Username Already Exists.\"],\r\n        }\r\n      );\r\n    }\r\n    const _id = uuid();\r\n\r\n    const newUser = {\r\n      _id,\r\n      createdAt: formatDate(),\r\n      updatedAt: formatDate(),\r\n      username,\r\n      password,\r\n      ...rest,\r\n      followers: [],\r\n      following: [],\r\n      bookmarks: [],\r\n      bio: \"\",\r\n      profileImage:\r\n        \"https://res.cloudinary.com/dylkclyom/image/upload/v1652861304/default_profile_400x400_kl4nw3.png\",\r\n      website: \"\",\r\n    };\r\n    const createdUser = schema.users.create(newUser);\r\n    const encodedToken = sign(\r\n      { _id, username },\r\n      process.env.REACT_APP_JWT_SECRET\r\n    );\r\n    return new Response(201, {}, { createdUser, encodedToken });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles user login.\r\n * send POST Request at /api/auth/login\r\n * body contains {username, password}\r\n * */\r\n\r\nexport const loginHandler = function (schema, request) {\r\n  const { username, password } = JSON.parse(request.requestBody);\r\n  try {\r\n    const foundUser = schema.users.findBy({ username: username });\r\n    if (!foundUser) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\r\n            \"The username you entered is not Registered. Not Found error\",\r\n          ],\r\n        }\r\n      );\r\n    }\r\n    if (password === foundUser.password) {\r\n      const encodedToken = sign(\r\n        { _id: foundUser._id, username },\r\n        process.env.REACT_APP_JWT_SECRET\r\n      );\r\n      return new Response(200, {}, { foundUser, encodedToken });\r\n    }\r\n    return new Response(\r\n      401,\r\n      {},\r\n      {\r\n        errors: [\r\n          \"The credentials you entered are invalid. Unauthorized access error.\",\r\n        ],\r\n      }\r\n    );\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}